{"file_contents":{"README.md":{"content":"# Full Gorilla Meal Planner\n\nA weekly meal planning and grocery list web app designed to help individuals, couples, and families build healthier eating habits. The app generates meal plans from a curated set of **2,250 meals across 25 themed cookbooks**, tailored to user preferences and goals.\n\n---\n\n## üåü User Story\nDana (49, male, weight loss goal) signs up on the website, chooses a plan (Free or Paid), and fills out a personalized questionnaire. Based on his answers, the app generates a weekly meal plan with portion sizes, grocery lists, and nutrition tracking. Dana can review each week, provide feedback, and adjust future plans. Families or couples can join under one account, with portion sizes automatically adjusted for each person.\n\n---\n\n## üöÄ Features\n### Authentication\n- User signup/login with account info (name, email, age, gender, birthdate, etc.)\n- Free plan vs. Paid plan access\n- Account types: Individual, Couple, Family (up to 4 people at launch)\n\n### Questionnaire\n- Adaptive questionnaire (skips irrelevant questions)\n- 50‚Äì60 questions per user\n- Stores health goals, restrictions, and preferences\n\n### Meal Planner\n- Generates weekly meal plans (based on 2,250 recipes in 25 cookbooks)\n- Portion sizes adjust automatically per family member\n- Tracks nutrition (calories, protein, fats, sugars, etc.)\n- Options to repeat, randomize, or choose a theme week (e.g., Keto, Italian)\n\n### Grocery List\n- Auto-generated from weekly meal plan\n- Categorized by sections (Produce, Meat, Pantry, etc.)\n\n### Cookbooks\n- 25 themed cookbooks, each with 90 meals\n- Free users: access to 4 cookbooks √ó 12 meals each (48 meals total)\n- Paid users: unlimited access\n- Users can preview cookbook tiles and table of contents\n\n### Feedback System\n- Rate weekly plans (1‚Äì5 stars)\n- 1‚Äì3 stars: meal is removed from personal cycle\n- 4‚Äì5 stars: meal stays in personal rotation\n- Data collected for analytics and improvement\n\n### Email Automation\n- Weekly reminder emails with simple branded header\n- Failed payment reminders (3-day retry)\n- Welcome email on signup\n\n---\n\n## üìä Plans\n- **Free Plan**:  \n  - 7 days of meals per month  \n  - Limited cookbooks (48 meals)  \n- **Paid Plan**:  \n  - Unlimited access to all cookbooks and features  \n\n---\n\n## üõ†Ô∏è Tech Stack\n- **Frontend:** Next.js + TypeScript  \n- **Styling:** CSS Modules with theme file for accessibility (colorblind-friendly palette)  \n- **Backend:** Next.js API routes  \n- **Database (MVP):** JSON files for meals, cookbooks, and questionnaire  \n- **Payments:** Stripe integration  \n- **Email:** Basic templates + automation (via external service)  \n\n---\n\n## üìÖ Roadmap\n### MVP\n- Free & Paid login flow\n- Adaptive questionnaire\n- Weekly meal plan generator\n- Grocery list generator\n- Basic cookbook browsing\n- Email templates (Welcome, Weekly, Failed Payment)\n\n### Phase 2\n- Admin dashboard\n- Analytics from feedback\n- Expanded family plan\n- More themes & recipes\n- Pro Plus plan (custom cookbook, advanced input)\n\n---\n\n## üìù Changelog\n- **v0.1.0 (MVP)** ‚Äî Initial release with login, questionnaire, meal planner, cookbooks, and grocery list.\n- **Future:** Iterative improvements with feedback-driven updates.\n","size_bytes":3200},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/basic-features/typescript for more information.\n","size_bytes":201},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n};\n\nmodule.exports = nextConfig;\n","size_bytes":120},"pages/_app.tsx":{"content":"import '../styles/globals.css';\nimport type { AppProps } from 'next/app';\nimport { SessionProvider } from 'next-auth/react';\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  );\n}\n\nexport default MyApp;\n","size_bytes":345},"pages/index.tsx":{"content":"import type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\n\nconst Home: NextPage = () => {\n  return (\n    <Layout>\n      <Head>\n        <title>Full Gorilla Meal Planner - Build Healthier Eating Habits</title>\n        <meta name=\"description\" content=\"Weekly meal planning and grocery lists for individuals, couples, and families\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <div style={{ textAlign: 'center', padding: '80px 20px', background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)', color: 'white' }}>\n        <img \n          src=\"/images/full-gorilla-logo-white.png\" \n          alt=\"Full Gorilla\" \n          style={{ \n            maxWidth: '300px', \n            width: '100%', \n            height: 'auto', \n            marginBottom: '40px',\n            filter: 'drop-shadow(0 10px 30px rgba(0, 255, 136, 0.3))'\n          }} \n        />\n        <h1 style={{ fontSize: '64px', marginBottom: '20px', color: '#00ff88', fontWeight: '900', textTransform: 'uppercase', letterSpacing: '2px' }}>\n          UNLEASH YOUR INNER BEAST\n        </h1>\n        <p style={{ fontSize: '28px', color: '#e0e0e0', maxWidth: '900px', margin: '0 auto 50px', fontWeight: '500' }}>\n          The most complete custom meal planning and grocery list system ever built\n        </p>\n        \n        <div style={{ display: 'flex', gap: '20px', justifyContent: 'center', marginBottom: '40px', flexWrap: 'wrap' }}>\n          <Link href=\"/signup\" style={{\n            background: '#00ff88',\n            color: '#1a1a1a',\n            padding: '18px 50px',\n            borderRadius: '50px',\n            textDecoration: 'none',\n            fontSize: '20px',\n            fontWeight: '900',\n            textTransform: 'uppercase',\n            boxShadow: '0 6px 20px rgba(0, 255, 136, 0.4)',\n            transition: 'all 0.3s'\n          }}>\n            Get Started Free\n          </Link>\n          <Link href=\"/login\" style={{\n            background: 'transparent',\n            color: '#00ff88',\n            padding: '18px 50px',\n            borderRadius: '50px',\n            textDecoration: 'none',\n            fontSize: '20px',\n            fontWeight: '900',\n            textTransform: 'uppercase',\n            border: '3px solid #00ff88'\n          }}>\n            Login\n          </Link>\n        </div>\n      </div>\n\n      <div style={{ padding: '60px 20px', background: 'white', position: 'relative', overflow: 'hidden' }}>\n        <div style={{\n          display: 'block',\n          position: 'absolute',\n          top: '18%',\n          left: '-8%',\n          width: '450px',\n          height: '300px',\n          backgroundImage: 'url(/images/food-bg-1.jpg)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          opacity: '1',\n          transform: 'rotate(-15deg)',\n          borderRadius: '20px'\n        }}></div>\n        <div style={{\n          display: 'block',\n          position: 'absolute',\n          top: '42%',\n          right: '-8%',\n          width: '450px',\n          height: '300px',\n          backgroundImage: 'url(/images/food-bg-2.jpg)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          opacity: '1',\n          transform: 'rotate(12deg)',\n          borderRadius: '20px'\n        }}></div>\n        <div style={{\n          display: 'block',\n          position: 'absolute',\n          top: '70%',\n          left: '-8%',\n          width: '450px',\n          height: '300px',\n          backgroundImage: 'url(/images/food-bg-3.jpg)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          opacity: '1',\n          transform: 'rotate(-15deg)',\n          borderRadius: '20px'\n        }}></div>\n\n        <h2 style={{ fontSize: '42px', marginBottom: '50px', color: '#1a1a1a', fontWeight: '900', textTransform: 'uppercase', textAlign: 'center', position: 'relative', zIndex: 1 }}>\n          Why Full Gorilla?\n        </h2>\n        \n        <div style={{ \n          display: 'flex',\n          flexDirection: 'column',\n          gap: '30px',\n          maxWidth: '700px',\n          margin: '0 auto',\n          textAlign: 'center',\n          position: 'relative',\n          zIndex: 1\n        }}>\n          <div style={{ padding: '40px 30px', background: '#f8f8f8', borderRadius: '16px', border: '3px solid #00ff88' }}>\n            <div style={{ fontSize: '60px', marginBottom: '20px' }}>üçΩÔ∏è</div>\n            <h3 style={{ marginBottom: '15px', fontSize: '26px', fontWeight: '800', color: '#1a1a1a' }}>2,250 RECIPES</h3>\n            <p style={{ color: '#1a1a1a', lineHeight: '1.8', fontSize: '17px' }}>\n              25 themed cookbooks with 90 meals each. Mediterranean to Keto, Italian to Asian Fusion‚Äîwe've got you covered.\n            </p>\n          </div>\n\n          <div style={{ padding: '40px 30px', background: '#f8f8f8', borderRadius: '16px', border: '3px solid #00ff88' }}>\n            <div style={{ fontSize: '60px', marginBottom: '20px' }}>üìã</div>\n            <h3 style={{ marginBottom: '15px', fontSize: '26px', fontWeight: '800', color: '#1a1a1a' }}>SMART MEAL PLANS</h3>\n            <p style={{ color: '#1a1a1a', lineHeight: '1.8', fontSize: '17px' }}>\n              Personalized weekly plans based on YOUR health goals, dietary restrictions, and taste preferences.\n            </p>\n          </div>\n\n          <div style={{ padding: '40px 30px', background: '#f8f8f8', borderRadius: '16px', border: '3px solid #00ff88' }}>\n            <div style={{ fontSize: '60px', marginBottom: '20px' }}>üõí</div>\n            <h3 style={{ marginBottom: '15px', fontSize: '26px', fontWeight: '800', color: '#1a1a1a' }}>AUTO GROCERY LISTS</h3>\n            <p style={{ color: '#1a1a1a', lineHeight: '1.8', fontSize: '17px' }}>\n              Organized shopping lists categorized by aisle, generated automatically from your weekly meal plan.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div style={{ padding: '80px 20px', background: '#1a1a1a' }}>\n          <h2 style={{ fontSize: '48px', marginBottom: '20px', color: '#00ff88', fontWeight: '900', textTransform: 'uppercase', textAlign: 'center' }}>Choose Your Level</h2>\n          <p style={{ fontSize: '20px', color: '#e0e0e0', textAlign: 'center', marginBottom: '60px' }}>You can always start with Freemium and upgrade to Pro when you're ready to Unleash The Beast!</p>\n          \n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(320px, 1fr))', gap: '40px', marginTop: '40px', maxWidth: '1100px', margin: '0 auto' }}>\n            <div style={{ background: '#2d2d2d', padding: '50px 35px', borderRadius: '20px', border: '3px solid #555' }}>\n              <h3 style={{ fontSize: '32px', marginBottom: '10px', color: '#00ff88', fontWeight: '900' }}>JUST MONKEYING AROUND</h3>\n              <p style={{ fontSize: '18px', color: '#aaa', marginBottom: '20px' }}>Freemium Plan</p>\n              <p style={{ fontSize: '48px', fontWeight: '900', color: '#00ff88', marginBottom: '30px' }}>$0<span style={{ fontSize: '20px', fontWeight: 'normal', color: '#aaa' }}>/mo</span></p>\n              <ul style={{ textAlign: 'left', lineHeight: '2.2', color: '#ddd', listStyle: 'none', padding: 0 }}>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0, color: '#00ff88' }}>‚úì</span> 7 days of meals per month</li>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0, color: '#00ff88' }}>‚úì</span> 4 cookbooks (48 meals)</li>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0, color: '#00ff88' }}>‚úì</span> Basic meal planning</li>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0, color: '#00ff88' }}>‚úì</span> Grocery list generation</li>\n              </ul>\n              <Link href=\"/signup\" style={{\n                display: 'block',\n                background: 'transparent',\n                color: '#00ff88',\n                padding: '16px',\n                borderRadius: '50px',\n                textDecoration: 'none',\n                marginTop: '40px',\n                fontWeight: '900',\n                textTransform: 'uppercase',\n                border: '3px solid #00ff88',\n                textAlign: 'center',\n                fontSize: '18px'\n              }}>\n                Start Free\n              </Link>\n            </div>\n\n            <div style={{ background: 'linear-gradient(135deg, #00ff88 0%, #00cc6a 100%)', padding: '50px 35px', borderRadius: '20px', border: '3px solid #00ff88', position: 'relative', boxShadow: '0 10px 40px rgba(0, 255, 136, 0.3)' }}>\n              <div style={{ \n                position: 'absolute', \n                top: '-18px', \n                left: '50%', \n                transform: 'translateX(-50%)',\n                background: '#1a1a1a',\n                color: '#00ff88',\n                padding: '8px 30px',\n                borderRadius: '30px',\n                fontSize: '16px',\n                fontWeight: '900',\n                border: '2px solid #00ff88'\n              }}>\n                MOST POPULAR\n              </div>\n              <h3 style={{ fontSize: '32px', marginBottom: '10px', color: '#1a1a1a', fontWeight: '900' }}>FULL GORILLA OFFICIAL</h3>\n              <p style={{ fontSize: '18px', color: '#1a1a1a', marginBottom: '20px', fontWeight: '600' }}>Pro Plan</p>\n              <p style={{ fontSize: '48px', fontWeight: '900', color: '#1a1a1a', marginBottom: '30px' }}>$9.99<span style={{ fontSize: '20px', fontWeight: 'normal' }}>/mo</span></p>\n              <ul style={{ textAlign: 'left', lineHeight: '2.2', color: '#1a1a1a', listStyle: 'none', padding: 0, fontWeight: '500' }}>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0 }}>‚úì</span> Unlimited weekly meal plans</li>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0 }}>‚úì</span> All 25 cookbooks (2,250 meals)</li>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0 }}>‚úì</span> Advanced customization</li>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0 }}>‚úì</span> Save & rate favorite meals</li>\n                <li style={{ paddingLeft: '25px', position: 'relative' }}><span style={{ position: 'absolute', left: 0 }}>‚úì</span> Family support (up to 4)</li>\n              </ul>\n              <Link href=\"/signup\" style={{\n                display: 'block',\n                background: '#1a1a1a',\n                color: '#00ff88',\n                padding: '16px',\n                borderRadius: '50px',\n                textDecoration: 'none',\n                marginTop: '40px',\n                fontWeight: '900',\n                textTransform: 'uppercase',\n                textAlign: 'center',\n                fontSize: '18px',\n                boxShadow: '0 6px 20px rgba(0, 0, 0, 0.4)'\n              }}>\n                Unleash The Beast!\n              </Link>\n            </div>\n          </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Home;\n","size_bytes":11439},"styles/Home.module.css":{"content":".container {\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.title a:hover,\n.title a:focus,\n.title a:active {\n  text-decoration: underline;\n}\n\n.title {\n  margin: 0;\n  line-height: 1.15;\n  font-size: 4rem;\n}\n\n.title,\n.description {\n  text-align: center;\n}\n\n.description {\n  margin: 4rem 0;\n  line-height: 1.5;\n  font-size: 1.5rem;\n}\n\n.code {\n  background: #fafafa;\n  border-radius: 5px;\n  padding: 0.75rem;\n  font-size: 1.1rem;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\n    Bitstream Vera Sans Mono, Courier New, monospace;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  max-width: 800px;\n}\n\n.card {\n  margin: 1rem;\n  padding: 1.5rem;\n  text-align: left;\n  color: inherit;\n  text-decoration: none;\n  border: 1px solid #eaeaea;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  max-width: 300px;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  color: #0070f3;\n  border-color: #0070f3;\n}\n\n.card h2 {\n  margin: 0 0 1rem 0;\n  font-size: 1.5rem;\n}\n\n.card p {\n  margin: 0;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.logo {\n  height: 1em;\n  margin-left: 0.2rem;\n}\n\n@media (max-width: 600px) {\n  .grid {\n    width: 100%;\n    flex-direction: column;\n  }\n}\n","size_bytes":1698},"styles/globals.css":{"content":"/* Reset + base */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  font-family: Arial, Helvetica, sans-serif;\n  background-color: #ffffff;\n  color: #222;\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n\na {\n  color: #1a7f37; /* Healthy green */\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\nbutton {\n  cursor: pointer;\n  border: none;\n  padding: 0.5rem 1rem;\n  background-color: #1a7f37;\n  color: white;\n  border-radius: 4px;\n  transition: background 0.2s ease-in-out;\n}\n\nbutton:hover {\n  background-color: #145a27;\n}\n\n/* Layout helpers */\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 1rem;\n}\n\n/* Accessibility colors (color-blind friendly palette) */\n:root {\n  --brand-green: #1a7f37;\n  --brand-light: #f8f9f9;\n  --brand-gray: #666;\n  --brand-dark: #222;\n}\n","size_bytes":841},"pages/api/hello.ts":{"content":"// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype Data = {\n  name: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  res.status(200).json({ name: 'John Doe' })\n}\n","size_bytes":307},"components/CookbookTile.tsx":{"content":"interface CookbookTileProps {\n  cookbook: {\n    id: number;\n    name: string;\n    theme: string;\n    mealCount: number;\n    image?: string;\n    isPremium: boolean;\n  };\n}\n\nexport default function CookbookTile({ cookbook }: CookbookTileProps) {\n  return (\n    <div style={{ \n      border: '1px solid #ddd', \n      borderRadius: '12px', \n      overflow: 'hidden',\n      background: 'white',\n      transition: 'transform 0.2s, box-shadow 0.2s',\n      cursor: 'pointer',\n      position: 'relative'\n    }}\n    onMouseEnter={(e) => {\n      e.currentTarget.style.transform = 'translateY(-4px)';\n      e.currentTarget.style.boxShadow = '0 8px 24px rgba(0,0,0,0.15)';\n    }}\n    onMouseLeave={(e) => {\n      e.currentTarget.style.transform = 'translateY(0)';\n      e.currentTarget.style.boxShadow = 'none';\n    }}\n    >\n      {cookbook.isPremium && (\n        <div style={{\n          position: 'absolute',\n          top: '10px',\n          right: '10px',\n          background: '#FFD700',\n          color: '#000',\n          padding: '4px 8px',\n          borderRadius: '4px',\n          fontSize: '12px',\n          fontWeight: 'bold'\n        }}>\n          PREMIUM\n        </div>\n      )}\n      \n      <div style={{ \n        width: '100%', \n        height: '200px', \n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: 'white',\n        fontSize: '48px'\n      }}>\n        üçΩÔ∏è\n      </div>\n      \n      <div style={{ padding: '15px' }}>\n        <h3 style={{ margin: '0 0 8px 0', fontSize: '18px' }}>{cookbook.name}</h3>\n        <p style={{ margin: '0 0 8px 0', color: '#666', fontSize: '14px' }}>{cookbook.theme}</p>\n        <p style={{ margin: 0, color: '#999', fontSize: '14px' }}>{cookbook.mealCount} recipes</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1859},"components/DashboardCalendar.tsx":{"content":"import MealCard from './MealCard';\n\ninterface DashboardCalendarProps {\n  mealPlan: any;\n}\n\nexport default function DashboardCalendar({ mealPlan }: DashboardCalendarProps) {\n  if (!mealPlan) {\n    return (\n      <div style={{ padding: '60px', textAlign: 'center', background: '#2d2d2d', borderRadius: '20px', border: '3px solid #00ff88' }}>\n        <h3 style={{ color: '#00ff88', fontSize: '28px', fontWeight: '900', textTransform: 'uppercase', marginBottom: '15px' }}>No Meal Plan Yet!</h3>\n        <p style={{ color: '#aaa', fontSize: '18px' }}>Complete your questionnaire to get started and unleash your potential!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ marginTop: '20px' }}>\n      <h2 style={{ fontSize: '32px', fontWeight: '900', color: '#1a1a1a', marginBottom: '30px', textTransform: 'uppercase' }}>Week of {mealPlan.weekOf}</h2>\n      \n      <div style={{ display: 'flex', flexDirection: 'column', gap: '25px' }}>\n        {mealPlan.meals?.map((dayMeals: any) => (\n          <div key={dayMeals.day} style={{ \n            background: 'white', \n            padding: '30px', \n            borderRadius: '20px',\n            border: '3px solid #00ff88',\n            boxShadow: '0 4px 15px rgba(0, 255, 136, 0.1)'\n          }}>\n            <h3 style={{ marginTop: 0, marginBottom: '25px', fontSize: '28px', fontWeight: '900', color: '#1a1a1a', textTransform: 'uppercase' }}>{dayMeals.day}</h3>\n            \n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '20px' }}>\n              <div>\n                <h4 style={{ marginTop: 0, marginBottom: '12px', color: '#00ff88', fontWeight: '800', textTransform: 'uppercase', fontSize: '16px' }}>üç≥ Breakfast</h4>\n                <MealCard meal={dayMeals.breakfast} />\n              </div>\n              <div>\n                <h4 style={{ marginTop: 0, marginBottom: '12px', color: '#00ff88', fontWeight: '800', textTransform: 'uppercase', fontSize: '16px' }}>ü•ó Lunch</h4>\n                <MealCard meal={dayMeals.lunch} />\n              </div>\n              <div>\n                <h4 style={{ marginTop: 0, marginBottom: '12px', color: '#00ff88', fontWeight: '800', textTransform: 'uppercase', fontSize: '16px' }}>üçΩÔ∏è Dinner</h4>\n                <MealCard meal={dayMeals.dinner} />\n              </div>\n            </div>\n\n            <div style={{ marginTop: '25px', padding: '15px 20px', background: 'linear-gradient(135deg, #00ff88 0%, #00cc6a 100%)', borderRadius: '12px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <strong style={{ color: '#1a1a1a', fontSize: '16px', fontWeight: '900', textTransform: 'uppercase' }}>Total Calories:</strong>\n              <span style={{ color: '#1a1a1a', fontSize: '24px', fontWeight: '900' }}>{dayMeals.breakfast.calories + dayMeals.lunch.calories + dayMeals.dinner.calories}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2976},"components/Layout.tsx":{"content":"import { signOut, useSession } from 'next-auth/react';\nimport Link from 'next/link';\nimport { ReactNode } from 'react';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { data: session } = useSession();\n\n  return (\n    <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <header style={{ \n        background: '#1a1a1a', \n        color: 'white', \n        padding: '15px 30px',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        borderBottom: '3px solid #00ff88'\n      }}>\n        <Link href=\"/\" style={{ color: 'white', textDecoration: 'none', display: 'flex', alignItems: 'center', gap: '15px' }}>\n          <img src=\"/images/full-gorilla-logo-white.png\" alt=\"Full Gorilla Logo\" style={{ height: '50px', width: 'auto' }} />\n        </Link>\n        <nav style={{ display: 'flex', gap: '25px', alignItems: 'center' }}>\n          {session ? (\n            <>\n              <Link href=\"/dashboard\" style={{ color: 'white', textDecoration: 'none', fontWeight: '700', fontSize: '15px', textTransform: 'uppercase' }}>Dashboard</Link>\n              <Link href=\"/cookbooks\" style={{ color: 'white', textDecoration: 'none', fontWeight: '700', fontSize: '15px', textTransform: 'uppercase' }}>Cookbooks</Link>\n              <Link href=\"/questionnaire\" style={{ color: 'white', textDecoration: 'none', fontWeight: '700', fontSize: '15px', textTransform: 'uppercase' }}>Preferences</Link>\n              <button \n                onClick={() => signOut({ callbackUrl: '/' })}\n                style={{ \n                  background: '#00ff88', \n                  color: '#1a1a1a', \n                  border: 'none', \n                  padding: '10px 20px', \n                  cursor: 'pointer',\n                  borderRadius: '50px',\n                  fontWeight: '900',\n                  fontSize: '14px',\n                  textTransform: 'uppercase'\n                }}\n              >\n                Sign Out\n              </button>\n            </>\n          ) : (\n            <>\n              <Link href=\"/login\" style={{ color: 'white', textDecoration: 'none', fontWeight: '700', fontSize: '15px', textTransform: 'uppercase' }}>Login</Link>\n              <Link href=\"/signup\" style={{ \n                background: '#00ff88', \n                color: '#1a1a1a', \n                textDecoration: 'none',\n                padding: '10px 20px',\n                borderRadius: '50px',\n                fontWeight: '900',\n                fontSize: '14px',\n                textTransform: 'uppercase'\n              }}>\n                Sign Up\n              </Link>\n            </>\n          )}\n        </nav>\n      </header>\n\n      <main style={{ flex: 1 }}>\n        {children}\n      </main>\n\n      <footer style={{ \n        background: '#1a1a1a', \n        padding: '30px', \n        textAlign: 'center',\n        marginTop: 'auto',\n        borderTop: '3px solid #00ff88'\n      }}>\n        <p style={{ color: '#aaa', margin: 0, fontSize: '14px' }}>&copy; 2025 Full Gorilla Meal Planner. All rights reserved.</p>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":3176},"components/MealCard.tsx":{"content":"interface MealCardProps {\n  meal: {\n    id: number;\n    name: string;\n    calories: number;\n    image?: string;\n  };\n}\n\nexport default function MealCard({ meal }: MealCardProps) {\n  return (\n    <div style={{ \n      border: '1px solid #ddd', \n      borderRadius: '8px', \n      padding: '15px',\n      background: 'white',\n      transition: 'box-shadow 0.2s',\n      cursor: 'pointer'\n    }}\n    onMouseEnter={(e) => e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)'}\n    onMouseLeave={(e) => e.currentTarget.style.boxShadow = 'none'}\n    >\n      {meal.image && (\n        <div style={{ \n          width: '100%', \n          height: '150px', \n          background: '#f0f0f0', \n          borderRadius: '4px',\n          marginBottom: '10px'\n        }} />\n      )}\n      <h3 style={{ margin: '0 0 8px 0', fontSize: '18px' }}>{meal.name}</h3>\n      <p style={{ margin: 0, color: '#666' }}>{meal.calories} calories</p>\n    </div>\n  );\n}\n","size_bytes":940},"components/QuestionnaireForm.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { questionnaireConfig, Question } from '../data/questionnaireConfig';\nimport { useSession } from 'next-auth/react';\n\ninterface QuestionnaireFormProps {\n  onComplete: (data: any) => void;\n}\n\ninterface FamilyMember {\n  id: string;\n  name: string;\n  responses: Record<string, any>;\n}\n\nexport default function QuestionnaireForm({ onComplete }: QuestionnaireFormProps) {\n  const { data: session } = useSession();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [primaryResponses, setPrimaryResponses] = useState<Record<string, any>>({});\n  const [familyMembers, setFamilyMembers] = useState<FamilyMember[]>([]);\n  const [currentMemberIndex, setCurrentMemberIndex] = useState(-1);\n  const [currentAnswer, setCurrentAnswer] = useState<any>('');\n  const [error, setError] = useState('');\n  \n  const getCurrentResponses = () => {\n    if (currentMemberIndex >= 0 && familyMembers.length > 0) {\n      return familyMembers[currentMemberIndex].responses;\n    }\n    return primaryResponses;\n  };\n\n  const shouldSkipQuestion = (question: Question, responses: Record<string, any>): boolean => {\n    if (!question.skipIf) return false;\n    return question.skipIf(responses);\n  };\n\n  const getVisibleQuestions = (): Question[] => {\n    const accountType = primaryResponses.q1 || 'individual';\n    const responses = getCurrentResponses();\n    \n    return questionnaireConfig.filter((q) => {\n      if (shouldSkipQuestion(q, responses)) {\n        return false;\n      }\n\n      if (currentMemberIndex >= 0 && q.appliesTo === 'family-member') {\n        return true;\n      }\n      \n      if (currentMemberIndex >= 0 && q.appliesTo === 'all') {\n        return true;\n      }\n\n      if (currentMemberIndex < 0 && (q.appliesTo === 'primary' || q.appliesTo === 'all')) {\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  const visibleQuestions = getVisibleQuestions();\n  const currentQuestion = visibleQuestions[currentQuestionIndex];\n  const totalQuestions = visibleQuestions.length;\n  const progressPercentage = ((currentQuestionIndex + 1) / totalQuestions) * 100;\n\n  useEffect(() => {\n    const savedValue = getCurrentResponses()[currentQuestion?.id];\n    if (savedValue !== undefined) {\n      setCurrentAnswer(savedValue);\n    } else {\n      setCurrentAnswer(currentQuestion?.type === 'checkbox' ? [] : '');\n    }\n  }, [currentQuestionIndex, currentMemberIndex]);\n\n  const handleAnswerChange = (value: any) => {\n    setCurrentAnswer(value);\n    setError('');\n  };\n\n  const saveAnswer = () => {\n    if (currentMemberIndex >= 0) {\n      const updatedMembers = [...familyMembers];\n      updatedMembers[currentMemberIndex].responses[currentQuestion.id] = currentAnswer;\n      setFamilyMembers(updatedMembers);\n    } else {\n      setPrimaryResponses((prev) => ({\n        ...prev,\n        [currentQuestion.id]: currentAnswer\n      }));\n    }\n  };\n\n  const validateAnswer = (): boolean => {\n    if (currentQuestion.required) {\n      if (currentQuestion.type === 'checkbox') {\n        const selectedCount = Array.isArray(currentAnswer) ? currentAnswer.length : 0;\n        if (selectedCount === 0) {\n          setError('Please select at least one option');\n          return false;\n        }\n        if (currentQuestion.maxSelections && selectedCount > currentQuestion.maxSelections) {\n          setError(`Please select no more than ${currentQuestion.maxSelections} options`);\n          return false;\n        }\n      } else if (!currentAnswer && currentAnswer !== 0 && currentAnswer !== false) {\n        setError('This question is required');\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    if (!validateAnswer()) {\n      return;\n    }\n\n    saveAnswer();\n\n    if (currentQuestion.id === 'q3' && primaryResponses.q1 !== 'individual') {\n      const numPeople = parseInt(primaryResponses.q2 || '2');\n      const nameInput = typeof currentAnswer === 'string' ? currentAnswer : '';\n      const names = nameInput.split(',').map(n => n.trim()).filter(n => n);\n      \n      const members: FamilyMember[] = [];\n      for (let i = 0; i < numPeople; i++) {\n        members.push({\n          id: `member-${i}`,\n          name: names[i] || `Family Member ${i + 1}`,\n          responses: {}\n        });\n      }\n      setFamilyMembers(members);\n      setCurrentMemberIndex(0);\n      setCurrentQuestionIndex(0);\n      return;\n    }\n\n    if (currentQuestionIndex < visibleQuestions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      if (currentMemberIndex >= 0 && currentMemberIndex < familyMembers.length - 1) {\n        setCurrentMemberIndex(currentMemberIndex + 1);\n        setCurrentQuestionIndex(0);\n      } else {\n        onComplete({\n          primaryResponses,\n          familyMembers\n        });\n      }\n    }\n  };\n\n  const handleBack = () => {\n    if (currentQuestionIndex > 0) {\n      saveAnswer();\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    } else if (currentMemberIndex > 0) {\n      setCurrentMemberIndex(currentMemberIndex - 1);\n      setCurrentQuestionIndex(visibleQuestions.length - 1);\n    } else if (currentMemberIndex === 0) {\n      setCurrentMemberIndex(-1);\n      const primaryQuestions = questionnaireConfig.filter(q => \n        q.appliesTo === 'primary' || (q.appliesTo === 'all' && q.id.match(/^q[1-3]$/))\n      );\n      setCurrentQuestionIndex(primaryQuestions.length - 1);\n    }\n  };\n\n  const renderQuestionInput = () => {\n    if (!currentQuestion) return null;\n\n    switch (currentQuestion.type) {\n      case 'radio':\n        return (\n          <div className=\"option-group\">\n            {currentQuestion.options?.map((option) => (\n              <label key={option.value} className=\"option-label\">\n                <input\n                  type=\"radio\"\n                  name={currentQuestion.id}\n                  value={option.value}\n                  checked={currentAnswer === option.value}\n                  onChange={(e) => handleAnswerChange(e.target.value)}\n                />\n                <span>{option.label}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      case 'checkbox':\n        return (\n          <div className=\"option-group\">\n            {currentQuestion.maxSelections && (\n              <p className=\"selection-hint\">Select up to {currentQuestion.maxSelections} options</p>\n            )}\n            {currentQuestion.options?.map((option) => (\n              <label key={option.value} className=\"option-label\">\n                <input\n                  type=\"checkbox\"\n                  value={option.value}\n                  checked={Array.isArray(currentAnswer) && currentAnswer.includes(option.value)}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    const current = Array.isArray(currentAnswer) ? currentAnswer : [];\n                    if (e.target.checked) {\n                      handleAnswerChange([...current, value]);\n                    } else {\n                      handleAnswerChange(current.filter((v: string) => v !== value));\n                    }\n                  }}\n                />\n                <span>{option.label}</span>\n              </label>\n            ))}\n          </div>\n        );\n\n      case 'text':\n        return (\n          <input\n            type=\"text\"\n            className=\"text-input\"\n            value={currentAnswer || ''}\n            onChange={(e) => handleAnswerChange(e.target.value)}\n            placeholder={currentQuestion.placeholder}\n          />\n        );\n\n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            className=\"number-input\"\n            value={currentAnswer || ''}\n            onChange={(e) => handleAnswerChange(e.target.value ? parseInt(e.target.value) : '')}\n            min={currentQuestion.min}\n            max={currentQuestion.max}\n            placeholder={currentQuestion.placeholder}\n          />\n        );\n\n      case 'height':\n        return (\n          <div className=\"height-input-group\">\n            <div className=\"height-field\">\n              <label>Feet</label>\n              <select\n                value={currentAnswer?.feet || ''}\n                onChange={(e) =>\n                  handleAnswerChange({ ...currentAnswer, feet: parseInt(e.target.value) || '' })\n                }\n              >\n                <option value=\"\">-</option>\n                {[4, 5, 6, 7].map((ft) => (\n                  <option key={ft} value={ft}>\n                    {ft}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"height-field\">\n              <label>Inches</label>\n              <select\n                value={currentAnswer?.inches || ''}\n                onChange={(e) =>\n                  handleAnswerChange({ ...currentAnswer, inches: parseInt(e.target.value) || '' })\n                }\n              >\n                <option value=\"\">-</option>\n                {Array.from({ length: 12 }, (_, i) => i).map((inch) => (\n                  <option key={inch} value={inch}>\n                    {inch}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        );\n\n      case 'slider':\n        return (\n          <div className=\"slider-container\">\n            <input\n              type=\"range\"\n              className=\"slider\"\n              min={currentQuestion.min || 1}\n              max={currentQuestion.max || 10}\n              value={currentAnswer || currentQuestion.min || 1}\n              onChange={(e) => handleAnswerChange(parseInt(e.target.value))}\n            />\n            <div className=\"slider-value\">{currentAnswer || currentQuestion.min || 1}</div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (!currentQuestion) {\n    return <div>Loading...</div>;\n  }\n\n  const currentMemberName =\n    currentMemberIndex >= 0 && familyMembers.length > 0\n      ? familyMembers[currentMemberIndex].name\n      : session?.user?.name || 'you';\n\n  const questionText = currentQuestion.text.replace('[Name]', currentMemberName);\n\n  return (\n    <div className=\"questionnaire-form\">\n      <div className=\"progress-section\">\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progressPercentage}%` }}></div>\n        </div>\n        <p className=\"progress-text\">\n          Question {currentQuestionIndex + 1} of {totalQuestions}\n          {currentMemberIndex >= 0 && ` ‚Ä¢ ${currentMemberName}'s Profile`}\n        </p>\n      </div>\n\n      <div className=\"question-content\">\n        <div className=\"question-section-label\">{currentQuestion.section}</div>\n        <h2 className=\"question-text\">{questionText}</h2>\n\n        <div className=\"answer-section\">{renderQuestionInput()}</div>\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        <div className=\"navigation-buttons\">\n          <button\n            className=\"btn-secondary\"\n            onClick={handleBack}\n            disabled={currentQuestionIndex === 0 && currentMemberIndex < 0}\n          >\n            ‚Üê Back\n          </button>\n          <button className=\"btn-primary\" onClick={handleNext}>\n            {currentQuestionIndex === visibleQuestions.length - 1 &&\n            (currentMemberIndex < 0 || currentMemberIndex === familyMembers.length - 1)\n              ? 'Complete'\n              : 'Next ‚Üí'}\n          </button>\n        </div>\n      </div>\n\n      <style jsx>{`\n        .questionnaire-form {\n          width: 100%;\n          max-width: 900px;\n          margin: 0 auto;\n        }\n\n        .progress-section {\n          margin-bottom: 50px;\n        }\n\n        .progress-bar-container {\n          width: 100%;\n          height: 12px;\n          background: #2d2d2d;\n          border-radius: 10px;\n          overflow: hidden;\n          margin-bottom: 20px;\n        }\n\n        .progress-bar {\n          height: 100%;\n          background: #00ff88;\n          transition: width 0.3s ease;\n        }\n\n        .progress-text {\n          font-size: 20px;\n          color: #e0e0e0;\n          text-align: center;\n          font-weight: 600;\n        }\n\n        .question-content {\n          background: white;\n          padding: 60px 50px;\n          border-radius: 20px;\n          border: 3px solid #00ff88;\n          box-shadow: 0 8px 30px rgba(0, 255, 136, 0.2);\n        }\n\n        .question-section-label {\n          font-size: 16px;\n          font-weight: 800;\n          color: #00ff88;\n          text-transform: uppercase;\n          letter-spacing: 2px;\n          margin-bottom: 20px;\n        }\n\n        .question-text {\n          font-size: 32px;\n          color: #1a1a1a;\n          margin-bottom: 45px;\n          line-height: 1.5;\n          font-weight: 800;\n        }\n\n        .answer-section {\n          margin-bottom: 40px;\n        }\n\n        .option-group {\n          display: flex;\n          flex-direction: column;\n          gap: 20px;\n        }\n\n        .option-label {\n          display: flex;\n          align-items: center;\n          padding: 24px 28px;\n          border: 3px solid #e0e0e0;\n          border-radius: 12px;\n          cursor: pointer;\n          transition: all 0.2s;\n          background: #f9f9f9;\n        }\n\n        .option-label:hover {\n          border-color: #00ff88;\n          background: #f0fff9;\n          transform: translateX(5px);\n        }\n\n        .option-label input {\n          margin-right: 18px;\n          width: 24px;\n          height: 24px;\n          cursor: pointer;\n          accent-color: #00ff88;\n        }\n\n        .option-label span {\n          font-size: 20px;\n          color: #1a1a1a;\n          font-weight: 500;\n          line-height: 1.6;\n        }\n\n        .selection-hint {\n          font-size: 18px;\n          color: #00ff88;\n          margin-bottom: 15px;\n          font-weight: 700;\n          font-style: italic;\n        }\n\n        .text-input,\n        .number-input {\n          width: 100%;\n          padding: 24px 28px;\n          font-size: 22px;\n          border: 3px solid #e0e0e0;\n          border-radius: 12px;\n          transition: border-color 0.2s;\n          background: #f9f9f9;\n        }\n\n        .text-input:focus,\n        .number-input:focus {\n          outline: none;\n          border-color: #00ff88;\n          background: white;\n        }\n\n        .height-input-group {\n          display: flex;\n          gap: 30px;\n        }\n\n        .height-field {\n          flex: 1;\n        }\n\n        .height-field label {\n          display: block;\n          font-size: 20px;\n          color: #1a1a1a;\n          margin-bottom: 15px;\n          font-weight: 700;\n        }\n\n        .height-field select {\n          width: 100%;\n          padding: 24px 20px;\n          font-size: 22px;\n          border: 3px solid #e0e0e0;\n          border-radius: 12px;\n          cursor: pointer;\n          background: #f9f9f9;\n        }\n\n        .height-field select:focus {\n          outline: none;\n          border-color: #00ff88;\n          background: white;\n        }\n\n        .slider-container {\n          text-align: center;\n          padding: 30px;\n        }\n\n        .slider {\n          width: 100%;\n          height: 12px;\n          border-radius: 5px;\n          outline: none;\n          margin-bottom: 25px;\n          cursor: pointer;\n          accent-color: #00ff88;\n        }\n\n        .slider-value {\n          font-size: 56px;\n          font-weight: 900;\n          color: #00ff88;\n        }\n\n        .error-message {\n          background: #fee;\n          color: #c33;\n          padding: 20px;\n          border-radius: 12px;\n          margin-bottom: 30px;\n          font-size: 18px;\n          border: 2px solid #fcc;\n          font-weight: 600;\n        }\n\n        .navigation-buttons {\n          display: flex;\n          justify-content: space-between;\n          gap: 20px;\n          margin-top: 50px;\n        }\n\n        .btn-primary,\n        .btn-secondary {\n          padding: 20px 40px;\n          font-size: 20px;\n          font-weight: 800;\n          border-radius: 50px;\n          cursor: pointer;\n          transition: all 0.2s;\n          border: none;\n          text-transform: uppercase;\n        }\n\n        .btn-primary {\n          background: #00ff88;\n          color: #1a1a1a;\n          flex: 1;\n        }\n\n        .btn-primary:hover {\n          background: #00cc6a;\n          transform: translateY(-3px);\n          box-shadow: 0 8px 20px rgba(0, 255, 136, 0.4);\n        }\n\n        .btn-secondary {\n          background: white;\n          color: #1a1a1a;\n          border: 3px solid #1a1a1a;\n          padding: 17px 40px;\n        }\n\n        .btn-secondary:hover:not(:disabled) {\n          background: #1a1a1a;\n          color: white;\n        }\n\n        .btn-secondary:disabled {\n          opacity: 0.3;\n          cursor: not-allowed;\n        }\n\n        @media (max-width: 768px) {\n          .question-content {\n            padding: 40px 30px;\n          }\n\n          .question-text {\n            font-size: 26px;\n          }\n\n          .option-label span {\n            font-size: 18px;\n          }\n\n          .navigation-buttons {\n            flex-direction: column-reverse;\n          }\n\n          .btn-primary,\n          .btn-secondary {\n            width: 100%;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":17377},"data/cookbooksData.ts":{"content":"export interface CookbookData {\n  name: string;\n  slug: string;\n  theme: string;\n  description: string;\n  category: 'cuisine' | 'health-goal' | 'diet-specific' | 'lifestyle' | 'specialty';\n  tags: string[];\n  isPremium: boolean;\n  featured: boolean;\n  mealCount: number;\n}\n\nexport const cookbooksData: CookbookData[] = [\n  {\n    name: 'Italian Whole Foods',\n    slug: 'italian-whole-foods',\n    theme: 'Italian cuisine with whole, unprocessed ingredients',\n    description: 'Authentic Italian recipes using fresh, whole ingredients - from classic pasta dishes to hearty soups',\n    category: 'cuisine',\n    tags: ['italian', 'mediterranean', 'pasta', 'comfort-food'],\n    isPremium: false,\n    featured: true,\n    mealCount: 90\n  },\n  {\n    name: 'Asian Fusion',\n    slug: 'asian-fusion',\n    theme: 'Chinese, Japanese, Thai, Korean, and Indian flavors',\n    description: 'A delicious journey through Asia with recipes from Chinese stir-fries to Japanese bowls and Thai curries',\n    category: 'cuisine',\n    tags: ['asian', 'chinese', 'japanese', 'thai', 'korean', 'indian'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Latin American',\n    slug: 'latin-american',\n    theme: 'Mexican, Peruvian, Brazilian, and Caribbean recipes',\n    description: 'Vibrant flavors from Mexico, Peru, Brazil, and the Caribbean with bold spices and fresh ingredients',\n    category: 'cuisine',\n    tags: ['latin', 'mexican', 'caribbean', 'south-american'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Mediterranean & Middle Eastern',\n    slug: 'mediterranean-middle-eastern',\n    theme: 'Greek, Lebanese, Moroccan, and Turkish recipes',\n    description: 'Heart-healthy Mediterranean and Middle Eastern dishes with olive oil, fresh herbs, and whole grains',\n    category: 'cuisine',\n    tags: ['mediterranean', 'middle-eastern', 'greek', 'lebanese'],\n    isPremium: false,\n    featured: true,\n    mealCount: 90\n  },\n  {\n    name: 'American Healthy Comfort',\n    slug: 'american-healthy-comfort',\n    theme: 'BBQ, Southern, and Modern American fusion',\n    description: 'Comfort food favorites made healthy - from BBQ to Southern classics with a nutritious twist',\n    category: 'cuisine',\n    tags: ['american', 'comfort-food', 'bbq', 'southern'],\n    isPremium: false,\n    featured: true,\n    mealCount: 90\n  },\n  {\n    name: 'African Roots',\n    slug: 'african-roots',\n    theme: 'Ethiopian, West African, and North African cuisine',\n    description: 'Rich, flavorful dishes from across Africa with unique spices and traditional cooking methods',\n    category: 'cuisine',\n    tags: ['african', 'ethiopian', 'moroccan'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Global Street Food',\n    slug: 'global-street-food',\n    theme: 'Healthy wraps, bowls, and handhelds from around the world',\n    description: 'Street food classics made healthy - portable meals perfect for on-the-go eating',\n    category: 'cuisine',\n    tags: ['street-food', 'wraps', 'bowls', 'portable'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Healthy Gut',\n    slug: 'healthy-gut',\n    theme: 'Microbiome-focused recipes for digestive health',\n    description: 'Gut-healing recipes with probiotics, prebiotics, and fiber-rich foods to support digestive wellness',\n    category: 'health-goal',\n    tags: ['gut-health', 'digestive', 'probiotics', 'fiber'],\n    isPremium: false,\n    featured: true,\n    mealCount: 90\n  },\n  {\n    name: 'Brain & Energy Boosting',\n    slug: 'brain-energy-boosting',\n    theme: 'Foods that enhance mental clarity and sustained energy',\n    description: 'Nutrient-dense meals to fuel your mind and body with steady energy throughout the day',\n    category: 'health-goal',\n    tags: ['brain-health', 'energy', 'mental-clarity', 'focus'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Heart Healthy Meals',\n    slug: 'heart-healthy-meals',\n    theme: 'Cardiovascular health-focused nutrition',\n    description: 'Heart-smart recipes low in saturated fat and rich in omega-3s, fiber, and antioxidants',\n    category: 'health-goal',\n    tags: ['heart-health', 'cardiovascular', 'low-sodium', 'omega-3'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Hormone Balance & Women\\'s Health',\n    slug: 'hormone-balance-womens-health',\n    theme: 'Recipes supporting hormonal health and women\\'s wellness',\n    description: 'Nutrient-rich meals designed to support hormonal balance, PCOS, and women\\'s health needs',\n    category: 'health-goal',\n    tags: ['hormones', 'womens-health', 'pcos', 'menopause'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Immune Boosting Recipes',\n    slug: 'immune-boosting-recipes',\n    theme: 'Strengthen your immune system naturally',\n    description: 'Vitamin and mineral-rich recipes to support immune function and overall health',\n    category: 'health-goal',\n    tags: ['immune-system', 'vitamins', 'antioxidants', 'wellness'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Lean Muscle & Athletic Recovery',\n    slug: 'lean-muscle-athletic-recovery',\n    theme: 'High-protein meals for muscle building and recovery',\n    description: 'Performance-focused nutrition with optimal protein and nutrients for athletes and active individuals',\n    category: 'health-goal',\n    tags: ['muscle-building', 'athletic', 'high-protein', 'recovery'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Weight Loss Made Easy',\n    slug: 'weight-loss-made-easy',\n    theme: 'Satisfying meals for healthy weight loss',\n    description: 'Delicious, filling recipes that support sustainable weight loss without feeling deprived',\n    category: 'health-goal',\n    tags: ['weight-loss', 'low-calorie', 'high-fiber', 'satisfying'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Healthy Weight Gain',\n    slug: 'healthy-weight-gain',\n    theme: 'Nutrient-dense meals for lean bulk',\n    description: 'Calorie-rich, wholesome recipes to support healthy weight gain and muscle development',\n    category: 'health-goal',\n    tags: ['weight-gain', 'lean-bulk', 'high-calorie', 'muscle'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Vegan Whole Foods',\n    slug: 'vegan-whole-foods',\n    theme: 'Plant-based meals with no animal products',\n    description: 'Delicious vegan recipes using whole, unprocessed plant foods for complete nutrition',\n    category: 'diet-specific',\n    tags: ['vegan', 'plant-based', 'no-animal-products'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Vegetarian Balance',\n    slug: 'vegetarian-balance',\n    theme: 'No meat, includes dairy and eggs',\n    description: 'Well-balanced vegetarian meals with dairy and eggs for complete protein and nutrition',\n    category: 'diet-specific',\n    tags: ['vegetarian', 'dairy', 'eggs', 'meatless'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Gluten-Free Everyday',\n    slug: 'gluten-free-everyday',\n    theme: 'Delicious meals without gluten',\n    description: 'Naturally gluten-free and adapted recipes that never sacrifice taste or texture',\n    category: 'diet-specific',\n    tags: ['gluten-free', 'celiac', 'wheat-free'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Dairy-Free Solutions',\n    slug: 'dairy-free-solutions',\n    theme: 'No dairy, full flavor',\n    description: 'Satisfying dairy-free meals with creative alternatives that taste amazing',\n    category: 'diet-specific',\n    tags: ['dairy-free', 'lactose-free', 'no-milk'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Keto Reset',\n    slug: 'keto-reset',\n    theme: 'Whole food keto, not junk-keto',\n    description: 'Clean keto recipes using real, whole foods - high fat, low carb, nutrient-dense',\n    category: 'diet-specific',\n    tags: ['keto', 'low-carb', 'high-fat', 'ketogenic'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Paleo Lifestyle',\n    slug: 'paleo-lifestyle',\n    theme: 'Ancestral eating for modern health',\n    description: 'Paleo-friendly recipes based on whole foods our ancestors ate - no grains, dairy, or processed foods',\n    category: 'diet-specific',\n    tags: ['paleo', 'grain-free', 'ancestral', 'whole-foods'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Blue Zones & Longevity Meals',\n    slug: 'blue-zones-longevity',\n    theme: 'Eat like the world\\'s healthiest populations',\n    description: 'Recipes inspired by Blue Zones where people live longest - plant-forward, whole foods, community-centered',\n    category: 'lifestyle',\n    tags: ['longevity', 'blue-zones', 'plant-forward', 'healthy-aging'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Quick & Budget-Friendly',\n    slug: 'quick-budget-friendly',\n    theme: '30-minute meals that won\\'t break the bank',\n    description: 'Fast, affordable recipes perfect for busy lifestyles without compromising nutrition or taste',\n    category: 'lifestyle',\n    tags: ['quick', 'budget-friendly', '30-minutes', 'affordable'],\n    isPremium: false,\n    featured: true,\n    mealCount: 90\n  },\n  {\n    name: 'Healthy Desserts',\n    slug: 'healthy-desserts',\n    theme: 'Guilt-free sweet treats',\n    description: 'Satisfy your sweet tooth with nutritious desserts made from whole ingredients',\n    category: 'specialty',\n    tags: ['desserts', 'sweet', 'treats', 'healthy-indulgence'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  },\n  {\n    name: 'Power Snacks & Small Plates',\n    slug: 'power-snacks-small-plates',\n    theme: 'Energy-boosting snacks and light meals',\n    description: 'Protein-rich snacks and small plates perfect for between meals or light dining',\n    category: 'specialty',\n    tags: ['snacks', 'small-plates', 'protein', 'portable'],\n    isPremium: true,\n    featured: false,\n    mealCount: 90\n  }\n];\n\nexport function getCookbookBySlug(slug: string): CookbookData | undefined {\n  return cookbooksData.find(cb => cb.slug === slug);\n}\n\nexport function getFreeTierCookbooks(): CookbookData[] {\n  return cookbooksData.filter(cb => !cb.isPremium);\n}\n\nexport function getPremiumCookbooks(): CookbookData[] {\n  return cookbooksData.filter(cb => cb.isPremium);\n}\n\nexport function getCookbooksByCategory(category: string): CookbookData[] {\n  return cookbooksData.filter(cb => cb.category === category);\n}\n\nexport function getCookbooksByTag(tag: string): CookbookData[] {\n  return cookbooksData.filter(cb => cb.tags.includes(tag));\n}\n","size_bytes":10797},"data/questionnaireConfig.ts":{"content":"export type QuestionType = 'radio' | 'checkbox' | 'text' | 'number' | 'select' | 'multi-select' | 'height' | 'slider';\n\nexport interface QuestionOption {\n  value: string;\n  label: string;\n}\n\nexport interface Question {\n  id: string;\n  section: string;\n  text: string;\n  type: QuestionType;\n  options?: QuestionOption[];\n  placeholder?: string;\n  min?: number;\n  max?: number;\n  required?: boolean;\n  appliesTo?: 'primary' | 'all' | 'family-member';\n  skipIf?: (responses: Record<string, any>) => boolean;\n  multiSelect?: boolean;\n  maxSelections?: number;\n}\n\nexport const questionnaireConfig: Question[] = [\n  {\n    id: 'q1',\n    section: 'Account Setup',\n    text: 'What type of account are you setting up?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'individual', label: 'Just me (Individual)' },\n      { value: 'couple', label: 'Me and my partner (Couple)' },\n      { value: 'family', label: 'Me and my family (Family)' }\n    ]\n  },\n  {\n    id: 'q2',\n    section: 'Account Setup',\n    text: 'How many people total?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    skipIf: (responses) => responses.q1 === 'individual',\n    options: [\n      { value: '2', label: '2 people' },\n      { value: '3', label: '3 people' },\n      { value: '4', label: '4 people' }\n    ]\n  },\n  {\n    id: 'q3',\n    section: 'Account Setup',\n    text: \"Let's get everyone's name\",\n    type: 'text',\n    appliesTo: 'primary',\n    required: true,\n    skipIf: (responses) => responses.q1 === 'individual',\n    placeholder: 'Enter names for each family member'\n  },\n  {\n    id: 'q4',\n    section: 'Basic Profile',\n    text: \"What is [Name]'s exact age?\",\n    type: 'number',\n    appliesTo: 'all',\n    required: true,\n    min: 1,\n    max: 120,\n    placeholder: 'Enter age in years'\n  },\n  {\n    id: 'q5',\n    section: 'Basic Profile',\n    text: \"What is [Name]'s biological sex?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'male', label: 'Male' },\n      { value: 'female', label: 'Female' }\n    ]\n  },\n  {\n    id: 'q6',\n    section: 'Basic Profile',\n    text: \"What is [Name]'s height?\",\n    type: 'height',\n    appliesTo: 'all',\n    required: true\n  },\n  {\n    id: 'q7',\n    section: 'Basic Profile',\n    text: \"What is [Name]'s current weight?\",\n    type: 'number',\n    appliesTo: 'all',\n    required: true,\n    min: 50,\n    max: 500,\n    placeholder: 'Weight in lbs'\n  },\n  {\n    id: 'q8',\n    section: 'Basic Profile',\n    text: \"What is [Name]'s target weight?\",\n    type: 'number',\n    appliesTo: 'all',\n    required: true,\n    min: 50,\n    max: 500,\n    placeholder: 'Target weight in lbs'\n  },\n  {\n    id: 'q9',\n    section: 'Basic Profile',\n    text: \"What is [Name]'s current body fat %? (if known, optional)\",\n    type: 'number',\n    appliesTo: 'all',\n    required: false,\n    min: 1,\n    max: 70,\n    placeholder: 'Body fat percentage'\n  },\n  {\n    id: 'q10',\n    section: 'Basic Profile',\n    text: 'What region do you live in? (helps us pick seasonal, locally-available ingredients)',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'northeast', label: 'Northeast (NY, PA, NJ, etc.)' },\n      { value: 'southeast', label: 'Southeast (FL, GA, NC, SC, etc.)' },\n      { value: 'midwest', label: 'Midwest (IL, OH, MI, IN, etc.)' },\n      { value: 'southwest', label: 'Southwest (TX, AZ, NM, etc.)' },\n      { value: 'west-coast', label: 'West Coast (CA, OR, WA)' },\n      { value: 'mountain-west', label: 'Mountain West (CO, UT, ID, MT, WY)' },\n      { value: 'alaska-hawaii', label: 'Alaska/Hawaii' },\n      { value: 'other', label: 'Other/International' }\n    ]\n  },\n  {\n    id: 'q11',\n    section: 'Health Goals & Timeline',\n    text: \"What are [Name]'s primary health goals? (Select ALL that apply)\",\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'lose-weight', label: 'Lose weight' },\n      { value: 'gain-weight', label: 'Gain weight' },\n      { value: 'build-muscle', label: 'Build lean muscle' },\n      { value: 'maintain-weight', label: 'Maintain current weight' },\n      { value: 'gut-health', label: 'Improve gut health & digestion' },\n      { value: 'mental-clarity', label: 'Boost energy & mental clarity' },\n      { value: 'heart-health', label: 'Support heart health' },\n      { value: 'longevity', label: 'Longevity & Blue Zone living' },\n      { value: 'sleep', label: 'Better sleep quality' },\n      { value: 'inflammation', label: 'Reduce inflammation' },\n      { value: 'stress-relief', label: 'Stress relief & mood support' },\n      { value: 'health-condition', label: 'Manage a health condition' },\n      { value: 'wellness', label: 'Overall wellness & vitality' }\n    ]\n  },\n  {\n    id: 'q12',\n    section: 'Health Goals & Timeline',\n    text: \"What timeline is [Name] aiming for?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: '1-3-months', label: '1-3 months' },\n      { value: '3-6-months', label: '3-6 months' },\n      { value: '6-12-months', label: '6-12 months' },\n      { value: 'long-term', label: 'Long-term lifestyle change (1+ years)' }\n    ]\n  },\n  {\n    id: 'q13',\n    section: 'Health Goals & Timeline',\n    text: \"What's most important to [Name]?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'speed', label: 'Speed of results' },\n      { value: 'sustainability', label: 'Sustainability' },\n      { value: 'flexibility', label: 'Flexibility' }\n    ]\n  },\n  {\n    id: 'q14',\n    section: 'Health Goals & Timeline',\n    text: \"What's [Name]'s biggest struggle with past diets?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'too-restrictive', label: 'Too restrictive/boring' },\n      { value: 'too-complicated', label: 'Too complicated' },\n      { value: 'always-hungry', label: 'Always hungry' },\n      { value: 'no-time', label: 'No time to cook' },\n      { value: 'no-results', label: \"Didn't see results\" },\n      { value: 'not-stick', label: \"Couldn't stick with it\" },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q15',\n    section: 'Health Goals & Timeline',\n    text: \"On a scale of 1-10, how motivated is [Name] right now?\",\n    type: 'slider',\n    appliesTo: 'all',\n    required: true,\n    min: 1,\n    max: 10\n  },\n  {\n    id: 'q16',\n    section: 'Medical History',\n    text: \"Does [Name] have any diagnosed medical conditions?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes' },\n      { value: 'no', label: 'No' }\n    ]\n  },\n  {\n    id: 'q17',\n    section: 'Medical History',\n    text: 'Select all that apply:',\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    skipIf: (responses) => responses.q16 === 'no',\n    options: [\n      { value: 'diabetes', label: 'Diabetes (Type 1 or 2)' },\n      { value: 'high-bp', label: 'High blood pressure' },\n      { value: 'high-cholesterol', label: 'High cholesterol' },\n      { value: 'heart-disease', label: 'Heart disease' },\n      { value: 'kidney-disease', label: 'Kidney disease' },\n      { value: 'pcos', label: 'PCOS' },\n      { value: 'thyroid', label: 'Thyroid condition (hypo/hyper)' },\n      { value: 'ibs', label: 'IBS/Digestive issues' },\n      { value: 'autoimmune', label: 'Autoimmune condition' },\n      { value: 'joint-pain', label: 'Joint pain/Arthritis' },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q18',\n    section: 'Medical History',\n    text: \"Does [Name] have a family history of health conditions?\",\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'diabetes', label: 'Diabetes' },\n      { value: 'heart-disease', label: 'Heart disease' },\n      { value: 'obesity', label: 'Obesity' },\n      { value: 'thyroid', label: 'Thyroid issues' },\n      { value: 'pcos', label: 'PCOS' },\n      { value: 'cancer', label: 'Cancer' },\n      { value: 'none', label: 'None' },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q19',\n    section: 'Medical History',\n    text: \"Is [Name] currently taking medications that affect appetite, digestion, or metabolism?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes' },\n      { value: 'no', label: 'No' },\n      { value: 'prefer-not-say', label: 'Prefer not to say' }\n    ]\n  },\n  {\n    id: 'q20',\n    section: 'Medical History',\n    text: \"Does [Name] have hormonal concerns?\",\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'thyroid', label: 'Thyroid issues' },\n      { value: 'pcos-endo', label: 'PCOS/Endometriosis' },\n      { value: 'menopause', label: 'Menopause/Perimenopause' },\n      { value: 'low-testosterone', label: 'Low testosterone' },\n      { value: 'pregnant-breastfeeding', label: 'Pregnant or breastfeeding' },\n      { value: 'trying-conceive', label: 'Trying to conceive' },\n      { value: 'none', label: 'None' }\n    ]\n  },\n  {\n    id: 'q21',\n    section: 'Medical History',\n    text: \"Does [Name] currently experience: (Select all that apply)\",\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'low-energy', label: 'Low energy or frequent fatigue' },\n      { value: 'brain-fog', label: 'Brain fog or focus issues' },\n      { value: 'joint-pain', label: 'Joint pain or inflammation' },\n      { value: 'bloating', label: 'Bloating, gas, or IBS symptoms' },\n      { value: 'acid-reflux', label: 'Acid reflux/heartburn' },\n      { value: 'constipation', label: 'Constipation or irregular bowel movements' },\n      { value: 'poor-sleep', label: 'Poor sleep or insomnia' },\n      { value: 'high-stress', label: 'High stress levels' },\n      { value: 'none', label: 'None of these' }\n    ]\n  },\n  {\n    id: 'q22',\n    section: 'Medical History',\n    text: \"Does [Name] have any food allergies?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes' },\n      { value: 'no', label: 'No' }\n    ]\n  },\n  {\n    id: 'q23',\n    section: 'Medical History',\n    text: 'Select all that apply:',\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    skipIf: (responses) => responses.q22 === 'no',\n    options: [\n      { value: 'dairy', label: 'Dairy/Lactose' },\n      { value: 'eggs', label: 'Eggs' },\n      { value: 'peanuts', label: 'Peanuts' },\n      { value: 'tree-nuts', label: 'Tree nuts (almonds, cashews, etc.)' },\n      { value: 'shellfish', label: 'Shellfish' },\n      { value: 'fish', label: 'Fish' },\n      { value: 'soy', label: 'Soy' },\n      { value: 'wheat-gluten', label: 'Wheat/Gluten' },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q24',\n    section: 'Medical History',\n    text: \"Does [Name] have any food intolerances? (separate from allergies)\",\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'lactose', label: 'Lactose' },\n      { value: 'gluten', label: 'Gluten' },\n      { value: 'fodmaps', label: 'FODMAPs' },\n      { value: 'nightshades', label: 'Nightshades' },\n      { value: 'histamine', label: 'Histamine' },\n      { value: 'none', label: 'None' },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q25',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] follow a specific diet?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'no-restrictions', label: 'No restrictions (eats everything)' },\n      { value: 'vegetarian', label: 'Vegetarian (no meat, dairy/eggs okay)' },\n      { value: 'vegan', label: 'Vegan (no animal products)' },\n      { value: 'pescatarian', label: 'Pescatarian (fish okay, no other meat)' },\n      { value: 'keto', label: 'Keto/Low-carb' },\n      { value: 'paleo', label: 'Paleo' },\n      { value: 'mediterranean', label: 'Mediterranean' },\n      { value: 'high-protein', label: 'High-protein' },\n      { value: 'low-sodium', label: 'Low-sodium' },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q26',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] eat red meat?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    skipIf: (responses) => responses.q25 === 'vegan' || responses.q25 === 'vegetarian',\n    options: [\n      { value: 'regularly', label: 'Yes, regularly' },\n      { value: 'occasionally', label: 'Yes, occasionally' },\n      { value: 'no', label: 'No' }\n    ]\n  },\n  {\n    id: 'q27',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] eat poultry?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    skipIf: (responses) => responses.q25 === 'vegan' || responses.q25 === 'vegetarian',\n    options: [\n      { value: 'regularly', label: 'Yes, regularly' },\n      { value: 'occasionally', label: 'Yes, occasionally' },\n      { value: 'no', label: 'No' }\n    ]\n  },\n  {\n    id: 'q28',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] eat seafood?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    skipIf: (responses) => responses.q25 === 'vegan',\n    options: [\n      { value: 'all-types', label: 'Yes, all types' },\n      { value: 'fish-only', label: 'Yes, fish only (no shellfish)' },\n      { value: 'shellfish-only', label: 'Shellfish only' },\n      { value: 'no', label: 'No' }\n    ]\n  },\n  {\n    id: 'q29',\n    section: 'Dietary Preferences',\n    text: 'Are there any religious or cultural dietary restrictions?',\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'halal', label: 'Halal' },\n      { value: 'kosher', label: 'Kosher' },\n      { value: 'hindu-no-beef', label: 'Hindu (no beef)' },\n      { value: 'no-pork', label: 'No pork' },\n      { value: 'other', label: 'Other' },\n      { value: 'none', label: 'None' }\n    ]\n  },\n  {\n    id: 'q30',\n    section: 'Dietary Preferences',\n    text: \"Select [Name]'s TOP 5 favorite cuisines:\",\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: true,\n    multiSelect: true,\n    maxSelections: 5,\n    options: [\n      { value: 'american', label: 'American/Comfort Food' },\n      { value: 'italian', label: 'Italian' },\n      { value: 'mexican', label: 'Mexican' },\n      { value: 'chinese', label: 'Chinese' },\n      { value: 'japanese', label: 'Japanese' },\n      { value: 'thai', label: 'Thai' },\n      { value: 'indian', label: 'Indian' },\n      { value: 'mediterranean', label: 'Mediterranean/Greek' },\n      { value: 'french', label: 'French' },\n      { value: 'korean', label: 'Korean' },\n      { value: 'vietnamese', label: 'Vietnamese' },\n      { value: 'middle-eastern', label: 'Middle Eastern' },\n      { value: 'southern', label: 'Southern/Soul Food' },\n      { value: 'caribbean', label: 'Caribbean' },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q31',\n    section: 'Dietary Preferences',\n    text: \"Which cuisines does [Name] dislike?\",\n    type: 'checkbox',\n    appliesTo: 'all',\n    required: false,\n    multiSelect: true,\n    options: [\n      { value: 'american', label: 'American/Comfort Food' },\n      { value: 'italian', label: 'Italian' },\n      { value: 'mexican', label: 'Mexican' },\n      { value: 'chinese', label: 'Chinese' },\n      { value: 'japanese', label: 'Japanese' },\n      { value: 'thai', label: 'Thai' },\n      { value: 'indian', label: 'Indian' },\n      { value: 'mediterranean', label: 'Mediterranean/Greek' },\n      { value: 'french', label: 'French' },\n      { value: 'korean', label: 'Korean' },\n      { value: 'vietnamese', label: 'Vietnamese' },\n      { value: 'middle-eastern', label: 'Middle Eastern' },\n      { value: 'southern', label: 'Southern/Soul Food' },\n      { value: 'caribbean', label: 'Caribbean' },\n      { value: 'none', label: 'None' }\n    ]\n  },\n  {\n    id: 'q32',\n    section: 'Dietary Preferences',\n    text: \"How does [Name] feel about spicy food?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'love-spicy', label: 'Love it spicy!' },\n      { value: 'mild-medium', label: 'Mild to medium spice' },\n      { value: 'no-spice', label: 'Prefer no spice' }\n    ]\n  },\n  {\n    id: 'q33',\n    section: 'Dietary Preferences',\n    text: \"Are there any foods [Name] absolutely will NOT eat? (even if not allergic)\",\n    type: 'text',\n    appliesTo: 'all',\n    required: false,\n    placeholder: 'e.g., mushrooms, Brussels sprouts, liver'\n  },\n  {\n    id: 'q34',\n    section: 'Dietary Preferences',\n    text: \"Are there foods [Name] wants included often? (favorites to prioritize)\",\n    type: 'text',\n    appliesTo: 'all',\n    required: false,\n    placeholder: 'e.g., salmon, avocado, sweet potatoes'\n  },\n  {\n    id: 'q35',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] want healthy versions of desserts/snacks included?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes, definitely!' },\n      { value: 'occasionally', label: 'Occasionally' },\n      { value: 'no', label: 'No, just main meals' }\n    ]\n  },\n  {\n    id: 'q36',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] drink coffee or tea daily?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'coffee', label: 'Yes, coffee' },\n      { value: 'tea', label: 'Yes, tea' },\n      { value: 'both', label: 'Both' },\n      { value: 'no', label: 'No' }\n    ]\n  },\n  {\n    id: 'q37',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] drink alcohol? How often?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'never', label: 'Never/Rarely' },\n      { value: '1-2-month', label: '1-2 times per month' },\n      { value: '1-2-week', label: '1-2 times per week' },\n      { value: '3-4-week', label: '3-4 times per week' },\n      { value: 'daily', label: 'Daily' }\n    ]\n  },\n  {\n    id: 'q38',\n    section: 'Dietary Preferences',\n    text: \"Does [Name] struggle more with:\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'salty', label: 'Salty cravings' },\n      { value: 'sweet', label: 'Sweet cravings' },\n      { value: 'both', label: 'Both equally' },\n      { value: 'neither', label: 'Neither' }\n    ]\n  },\n  {\n    id: 'q39',\n    section: 'Sleep & Hydration',\n    text: \"How many hours of sleep does [Name] typically get per night?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'less-5', label: 'Less than 5 hours' },\n      { value: '5-6', label: '5-6 hours' },\n      { value: '7-8', label: '7-8 hours' },\n      { value: '8-9', label: '8-9 hours' },\n      { value: '9-plus', label: '9+ hours' }\n    ]\n  },\n  {\n    id: 'q40',\n    section: 'Sleep & Hydration',\n    text: \"How much water does [Name] drink daily?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'less-4', label: 'Less than 4 cups' },\n      { value: '4-6', label: '4-6 cups' },\n      { value: '6-8', label: '6-8 cups (recommended)' },\n      { value: '8-10', label: '8-10 cups' },\n      { value: '10-plus', label: '10+ cups' }\n    ]\n  },\n  {\n    id: 'q41',\n    section: 'Fitness & Activity',\n    text: \"How physically active is [Name] on a typical day?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'sedentary', label: 'Sedentary (desk job, little exercise)' },\n      { value: 'lightly-active', label: 'Lightly active (light exercise 1-3 days/week)' },\n      { value: 'moderately-active', label: 'Moderately active (exercise 3-5 days/week)' },\n      { value: 'very-active', label: 'Very active (intense exercise 6-7 days/week)' },\n      { value: 'extremely-active', label: 'Extremely active (athlete/physical job + daily training)' }\n    ]\n  },\n  {\n    id: 'q42',\n    section: 'Fitness & Activity',\n    text: \"Does [Name] currently follow a workout routine?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes' },\n      { value: 'no', label: 'No' }\n    ]\n  },\n  {\n    id: 'q43',\n    section: 'Fitness & Activity',\n    text: \"How many days per week does [Name] work out?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    skipIf: (responses) => responses.q42 === 'no',\n    options: [\n      { value: '1', label: '1 day' },\n      { value: '2', label: '2 days' },\n      { value: '3', label: '3 days' },\n      { value: '4', label: '4 days' },\n      { value: '5', label: '5 days' },\n      { value: '6', label: '6 days' },\n      { value: '7', label: '7 days' }\n    ]\n  },\n  {\n    id: 'q44',\n    section: 'Fitness & Activity',\n    text: \"What type of exercise does [Name] mostly do?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    skipIf: (responses) => responses.q42 === 'no',\n    options: [\n      { value: 'strength', label: 'Strength training' },\n      { value: 'cardio', label: 'Cardio (running, cycling, etc.)' },\n      { value: 'sports', label: 'Sports' },\n      { value: 'mixed', label: 'Mixed (combination)' },\n      { value: 'yoga', label: 'Yoga/Pilates' },\n      { value: 'other', label: 'Other' }\n    ]\n  },\n  {\n    id: 'q45',\n    section: 'Fitness & Activity',\n    text: \"How long are typical workout sessions?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    skipIf: (responses) => responses.q42 === 'no',\n    options: [\n      { value: 'under-30', label: 'Under 30 minutes' },\n      { value: '30-45', label: '30-45 minutes' },\n      { value: '45-60', label: '45-60 minutes' },\n      { value: '60-90', label: '60-90 minutes' },\n      { value: '90-plus', label: '90+ minutes' }\n    ]\n  },\n  {\n    id: 'q46',\n    section: 'Fitness & Activity',\n    text: \"Does [Name] want meal plans synced with training schedule?\",\n    type: 'radio',\n    appliesTo: 'all',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes (higher calories on workout days)' },\n      { value: 'no', label: 'No (consistent daily intake)' }\n    ]\n  },\n  {\n    id: 'q47',\n    section: 'Cooking & Meal Logistics',\n    text: 'What is your cooking skill level?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'beginner', label: 'Beginner (can follow simple recipes)' },\n      { value: 'intermediate', label: 'Intermediate (comfortable with most techniques)' },\n      { value: 'advanced', label: 'Advanced (confident with complex recipes)' }\n    ]\n  },\n  {\n    id: 'q48',\n    section: 'Cooking & Meal Logistics',\n    text: 'How much time can you spend cooking breakfast?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: '5-or-less', label: '5 minutes or less' },\n      { value: '5-15', label: '5-15 minutes' },\n      { value: '15-30', label: '15-30 minutes' },\n      { value: '30-plus', label: '30+ minutes' }\n    ]\n  },\n  {\n    id: 'q49',\n    section: 'Cooking & Meal Logistics',\n    text: 'How much time can you spend cooking lunch?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: '5-or-less', label: '5 minutes or less' },\n      { value: '5-15', label: '5-15 minutes' },\n      { value: '15-30', label: '15-30 minutes' },\n      { value: '30-plus', label: '30+ minutes' }\n    ]\n  },\n  {\n    id: 'q50',\n    section: 'Cooking & Meal Logistics',\n    text: 'How much time can you spend cooking dinner?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: '15-or-less', label: '15 minutes or less' },\n      { value: '15-30', label: '15-30 minutes' },\n      { value: '30-45', label: '30-45 minutes' },\n      { value: '45-60', label: '45-60 minutes' },\n      { value: '60-plus', label: '60+ minutes (I love cooking!)' }\n    ]\n  },\n  {\n    id: 'q51',\n    section: 'Cooking & Meal Logistics',\n    text: 'What kitchen equipment do you have? (Select all that apply)',\n    type: 'checkbox',\n    appliesTo: 'primary',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'stove-oven', label: 'Stove/Oven' },\n      { value: 'microwave', label: 'Microwave' },\n      { value: 'slow-cooker', label: 'Slow cooker/Crockpot' },\n      { value: 'instant-pot', label: 'Instant Pot/Pressure cooker' },\n      { value: 'air-fryer', label: 'Air fryer' },\n      { value: 'grill', label: 'Grill' },\n      { value: 'blender', label: 'Blender' },\n      { value: 'food-processor', label: 'Food processor' }\n    ]\n  },\n  {\n    id: 'q52',\n    section: 'Cooking & Meal Logistics',\n    text: 'Do you prefer batch cooking/meal prep or cooking fresh daily?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'meal-prep', label: 'Love meal prep!' },\n      { value: 'mix', label: 'Mix of both' },\n      { value: 'fresh', label: 'Prefer cooking fresh' }\n    ]\n  },\n  {\n    id: 'q53',\n    section: 'Cooking & Meal Logistics',\n    text: 'How many meals per day does your household need?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: '3-meals', label: '3 meals (breakfast, lunch, dinner)' },\n      { value: '4-meals', label: '4 meals (breakfast, lunch, dinner, snack)' },\n      { value: '6-meals', label: '6 small meals (athlete/bodybuilder grazing throughout day)' },\n      { value: 'dinner-only', label: 'Just dinner (others handled separately)' }\n    ]\n  },\n  {\n    id: 'q54',\n    section: 'Cooking & Meal Logistics',\n    text: 'Do you prefer:',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'larger-meals', label: 'Larger meals, less often' },\n      { value: 'smaller-meals', label: 'Smaller meals/snacks more often' }\n    ]\n  },\n  {\n    id: 'q55',\n    section: 'Cooking & Meal Logistics',\n    text: 'Do you pack lunches or eat out during the week?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'pack', label: 'Pack lunches (need lunch recipes)' },\n      { value: 'eat-out', label: 'Eat out for lunch (only need breakfast/dinner)' },\n      { value: 'mix', label: 'Mix of both' }\n    ]\n  },\n  {\n    id: 'q56',\n    section: 'Cooking & Meal Logistics',\n    text: 'How often do you eat out or order takeout?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'rarely', label: 'Rarely (1-2 times per month)' },\n      { value: '1-2-week', label: '1-2 times per week' },\n      { value: '3-4-week', label: '3-4 times per week' },\n      { value: '5-plus-week', label: '5+ times per week' }\n    ]\n  },\n  {\n    id: 'q57',\n    section: 'Cooking & Meal Logistics',\n    text: 'Where do you prefer to shop? (Select all that apply)',\n    type: 'checkbox',\n    appliesTo: 'primary',\n    required: true,\n    multiSelect: true,\n    options: [\n      { value: 'large-grocery', label: 'Large grocery store (wide selection, all brands)' },\n      { value: 'natural-organic', label: 'Natural/Organic stores (Whole Foods, Sprouts, Trader Joe\\'s)' },\n      { value: 'farmers-markets', label: 'Local farmers markets (seasonal, fresh produce)' },\n      { value: 'local-farms', label: 'Local farms (meat, eggs, honey)' },\n      { value: 'wholesale', label: 'Wholesale clubs (Costco, Sam\\'s Club)' },\n      { value: 'online', label: 'Online grocery delivery' }\n    ]\n  },\n  {\n    id: 'q58',\n    section: 'Grocery & Budget',\n    text: \"What's your weekly grocery budget for meals?\",\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'under-75', label: 'Under $75' },\n      { value: '75-150', label: '$75-$150' },\n      { value: '150-250', label: '$150-$250' },\n      { value: '250-350', label: '$250-$350' },\n      { value: '350-plus', label: '$350+' }\n    ]\n  },\n  {\n    id: 'q59',\n    section: 'Grocery & Budget',\n    text: 'Are you willing to buy specialty ingredients?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes, open to new ingredients' },\n      { value: 'sometimes', label: 'Sometimes, if not too expensive' },\n      { value: 'no', label: 'No, prefer common ingredients only' }\n    ]\n  },\n  {\n    id: 'q60',\n    section: 'Lifestyle Considerations',\n    text: 'Do you travel often or need portable meals?',\n    type: 'radio',\n    appliesTo: 'primary',\n    required: true,\n    options: [\n      { value: 'yes', label: 'Yes, travel frequently (need portable options)' },\n      { value: 'occasionally', label: 'Occasionally' },\n      { value: 'no', label: 'No, mostly eating at home' }\n    ]\n  }\n];\n","size_bytes":28867},"pages/api/auth/[...nextauth].ts":{"content":"import NextAuth, { NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const testUser = {\n          email: 'test@example.com',\n          password: 'password123'\n        };\n\n        if (credentials.email === testUser.email && credentials.password === testUser.password) {\n          return {\n            id: '1',\n            name: 'Test User',\n            email: credentials.email,\n          };\n        }\n\n        return null;\n      }\n    })\n  ],\n  pages: {\n    signIn: '/login',\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    }\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n\nexport default NextAuth(authOptions);\n","size_bytes":1290},"pages/api/auth/signup.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  const { name, email, password, age, gender, accountType, plan } = req.body;\n\n  if (!name || !email || !password) {\n    return res.status(400).json({ message: 'Missing required fields' });\n  }\n\n  const newUser = {\n    id: Date.now().toString(),\n    name,\n    email,\n    age,\n    gender,\n    accountType,\n    plan,\n    createdAt: new Date().toISOString()\n  };\n\n  return res.status(201).json({ \n    message: 'User created successfully',\n    user: newUser \n  });\n}\n","size_bytes":707},"pages/api/cookbooks.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from './auth/[...nextauth]';\nimport { PrismaClient } from '@prisma/client';\nimport { cookbooksData } from '../../data/cookbooksData';\n\nconst prisma = new PrismaClient();\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    const session = await getServerSession(req, res, authOptions);\n\n    if (!session || !session.user?.email) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email: session.user.email },\n      include: {\n        subscription: true,\n        cookbookAccess: {\n          include: {\n            cookbook: true\n          }\n        }\n      }\n    });\n\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const userPlan = user.subscription?.plan || 'free';\n    const accessibleCookbookIds = new Set(\n      user.cookbookAccess.map(access => access.cookbook.slug)\n    );\n\n    const cookbooksWithAccess = cookbooksData.map(cookbookData => ({\n      id: cookbookData.slug,\n      ...cookbookData,\n      hasAccess: userPlan === 'pro' || accessibleCookbookIds.has(cookbookData.slug)\n    }));\n\n    return res.status(200).json({\n      cookbooks: cookbooksWithAccess,\n      userPlan\n    });\n\n  } catch (error) {\n    console.error('Error fetching cookbooks:', error);\n    return res.status(500).json({ \n      error: 'Failed to fetch cookbooks',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n","size_bytes":1771},"pages/api/meals.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from './auth/[...nextauth]';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const session = await getServerSession(req, res, authOptions);\n  \n  if (!session) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  if (req.method === 'GET') {\n    const sampleMealPlan = {\n      weekOf: new Date().toISOString().split('T')[0],\n      meals: [\n        {\n          day: 'Monday',\n          breakfast: { id: 1, name: 'Avocado Toast', calories: 350 },\n          lunch: { id: 2, name: 'Grilled Chicken Salad', calories: 450 },\n          dinner: { id: 3, name: 'Salmon with Roasted Vegetables', calories: 550 }\n        },\n        {\n          day: 'Tuesday',\n          breakfast: { id: 4, name: 'Greek Yogurt Parfait', calories: 300 },\n          lunch: { id: 5, name: 'Quinoa Buddha Bowl', calories: 500 },\n          dinner: { id: 6, name: 'Turkey Meatballs with Pasta', calories: 600 }\n        },\n        {\n          day: 'Wednesday',\n          breakfast: { id: 7, name: 'Oatmeal with Berries', calories: 280 },\n          lunch: { id: 8, name: 'Vegetable Stir Fry', calories: 420 },\n          dinner: { id: 9, name: 'Grilled Steak with Sweet Potato', calories: 650 }\n        }\n      ]\n    };\n\n    return res.status(200).json(sampleMealPlan);\n  }\n\n  return res.status(405).json({ message: 'Method not allowed' });\n}\n","size_bytes":1485},"pages/api/questionnaire.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from './auth/[...nextauth]';\nimport { PrismaClient } from '@prisma/client';\nimport { assignCookbooksBasedOnPreferences, getCookbookDetails } from '../../utils/cookbookAssignment';\nimport { cookbooksData } from '../../data/cookbooksData';\n\nconst prisma = new PrismaClient();\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    const session = await getServerSession(req, res, authOptions);\n\n    if (!session || !session.user?.email) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email: session.user.email }\n    });\n\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const { primaryResponses, familyMembers } = req.body;\n\n    if (!primaryResponses) {\n      return res.status(400).json({ error: 'Missing questionnaire responses' });\n    }\n\n    const accountType = primaryResponses.q1 || 'individual';\n    const totalPeople = parseInt(primaryResponses.q2 || '1');\n    const region = primaryResponses.q10;\n\n    await prisma.$transaction(async (tx) => {\n      const questionnaireResponse = await tx.questionnaireResponse.create({\n        data: {\n          userId: user.id,\n          accountType,\n          totalPeople,\n          region,\n          cookingSkillLevel: primaryResponses.q47,\n          breakfastTime: primaryResponses.q48,\n          lunchTime: primaryResponses.q49,\n          dinnerTime: primaryResponses.q50,\n          kitchenEquipment: Array.isArray(primaryResponses.q51) ? primaryResponses.q51 : [],\n          mealPrepPreference: primaryResponses.q52,\n          mealsPerDay: primaryResponses.q53,\n          mealSizePreference: primaryResponses.q54,\n          lunchPacking: primaryResponses.q55,\n          eatingOutFrequency: primaryResponses.q56,\n          shoppingPreferences: Array.isArray(primaryResponses.q57) ? primaryResponses.q57 : [],\n          weeklyBudget: primaryResponses.q58,\n          specialtyIngredients: primaryResponses.q59,\n          travelFrequency: primaryResponses.q60,\n          responses: primaryResponses\n        }\n      });\n\n      if (familyMembers && Array.isArray(familyMembers) && familyMembers.length > 0) {\n        for (const member of familyMembers) {\n          const responses = member.responses || {};\n          \n          const familyMember = await tx.familyMember.create({\n            data: {\n              userId: user.id,\n              name: member.name,\n              age: parseInt(responses.q4) || 0,\n              sex: responses.q5 || 'male',\n              height: responses.q6 || { feet: 5, inches: 0 },\n              currentWeight: parseInt(responses.q7) || 0,\n              targetWeight: parseInt(responses.q8) || 0,\n              bodyFat: responses.q9 ? parseFloat(responses.q9) : null\n            }\n          });\n\n          await tx.familyMemberProfile.create({\n            data: {\n              familyMemberId: familyMember.id,\n              healthGoals: Array.isArray(responses.q11) ? responses.q11 : [],\n              timeline: responses.q12,\n              priority: responses.q13,\n              pastDietStruggles: responses.q14,\n              motivationLevel: parseInt(responses.q15) || null,\n              medicalConditions: Array.isArray(responses.q17) ? responses.q17 : [],\n              familyHistory: Array.isArray(responses.q18) ? responses.q18 : [],\n              medications: responses.q19 === 'yes',\n              hormonalConcerns: Array.isArray(responses.q20) ? responses.q20 : [],\n              currentSymptoms: Array.isArray(responses.q21) ? responses.q21 : [],\n              allergies: Array.isArray(responses.q23) ? responses.q23 : [],\n              intolerances: Array.isArray(responses.q24) ? responses.q24 : [],\n              dietType: responses.q25,\n              eatsRedMeat: responses.q26,\n              eatsPoultry: responses.q27,\n              eatsSeafood: responses.q28,\n              religiousDietaryRestrictions: Array.isArray(responses.q29) ? responses.q29 : [],\n              favoriteCuisines: Array.isArray(responses.q30) ? responses.q30 : [],\n              dislikedCuisines: Array.isArray(responses.q31) ? responses.q31 : [],\n              spicePreference: responses.q32,\n              foodsToAvoid: responses.q33 ? [responses.q33] : [],\n              foodsToInclude: responses.q34 ? [responses.q34] : [],\n              wantsDesserts: responses.q35,\n              coffeeTea: responses.q36,\n              alcoholFrequency: responses.q37,\n              cravingType: responses.q38,\n              sleepHours: responses.q39,\n              waterIntake: responses.q40,\n              activityLevel: responses.q41,\n              hasWorkoutRoutine: responses.q42 === 'yes',\n              workoutDaysPerWeek: responses.q43 ? parseInt(responses.q43) : null,\n              workoutType: responses.q44,\n              workoutDuration: responses.q45,\n              syncWithTraining: responses.q46 === 'yes'\n            }\n          });\n        }\n      }\n\n      await tx.user.update({\n        where: { id: user.id },\n        data: {\n          questionnaireCompleted: true,\n          accountType\n        }\n      });\n\n      const assignedCookbookSlugs = assignCookbooksBasedOnPreferences(\n        primaryResponses,\n        familyMembers || []\n      );\n\n      for (const cookbookSlug of assignedCookbookSlugs) {\n        const cookbookData = cookbooksData.find(cb => cb.slug === cookbookSlug);\n        if (!cookbookData) continue;\n\n        let cookbook = await tx.cookbook.findUnique({\n          where: { slug: cookbookSlug }\n        });\n\n        if (!cookbook) {\n          cookbook = await tx.cookbook.create({\n            data: {\n              name: cookbookData.name,\n              slug: cookbookData.slug,\n              theme: cookbookData.theme,\n              description: cookbookData.description,\n              category: cookbookData.category,\n              tags: cookbookData.tags,\n              isPremium: cookbookData.isPremium,\n              featured: cookbookData.featured,\n              mealCount: cookbookData.mealCount\n            }\n          });\n        }\n\n        await tx.userCookbookAccess.upsert({\n          where: {\n            userId_cookbookId: {\n              userId: user.id,\n              cookbookId: cookbook.id\n            }\n          },\n          update: {},\n          create: {\n            userId: user.id,\n            cookbookId: cookbook.id\n          }\n        });\n      }\n    });\n\n    const assignedCookbookSlugs = assignCookbooksBasedOnPreferences(\n      primaryResponses,\n      familyMembers || []\n    );\n    const assignedCookbookDetails = getCookbookDetails(assignedCookbookSlugs);\n\n    return res.status(200).json({ \n      success: true, \n      message: 'Questionnaire saved successfully',\n      assignedCookbooks: assignedCookbookDetails\n    });\n\n  } catch (error) {\n    console.error('Error saving questionnaire:', error);\n    return res.status(500).json({ \n      error: 'Failed to save questionnaire', \n      details: error instanceof Error ? error.message : 'Unknown error' \n    });\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n","size_bytes":7343},"pages/api/send-email.ts":{"content":"import type { NextApiRequest, NextApiResponse } from 'next';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from './auth/[...nextauth]';\nimport {\n  sendPaymentFailureEmail,\n  sendWeeklyMealPlanEmail,\n  sendWelcomeEmail,\n  sendSubscriptionUpgradeEmail,\n  sendSubscriptionDowngradeEmail,\n  sendSubscriptionRenewalReminderEmail,\n  sendMealRatingReminderEmail,\n  sendPasswordResetEmail\n} from '../../utils/email';\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  const session = await getServerSession(req, res, authOptions);\n  \n  if (!session || !session.user) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  const { type, email, name } = req.body;\n\n  if (!type || !email || !name) {\n    return res.status(400).json({ error: 'Missing required fields: type, email, name' });\n  }\n\n  try {\n    let success = false;\n\n    switch (type) {\n      case 'welcome': {\n        const { accountType } = req.body;\n        success = await sendWelcomeEmail(email, name, accountType);\n        break;\n      }\n\n      case 'payment_failure': {\n        const { gracePeriodEnd, amount, lastFourDigits, failureReason } = req.body;\n        if (!gracePeriodEnd) {\n          return res.status(400).json({ error: 'gracePeriodEnd is required for payment_failure emails' });\n        }\n        success = await sendPaymentFailureEmail(\n          email, \n          name, \n          new Date(gracePeriodEnd),\n          amount,\n          lastFourDigits,\n          failureReason\n        );\n        break;\n      }\n\n      case 'weekly_meal_plan': {\n        const { weekStartDate, mealPreviews, totalCalories, totalPrepTime } = req.body;\n        if (!weekStartDate) {\n          return res.status(400).json({ error: 'weekStartDate is required for weekly_meal_plan emails' });\n        }\n        success = await sendWeeklyMealPlanEmail(\n          email, \n          name, \n          new Date(weekStartDate),\n          mealPreviews,\n          totalCalories,\n          totalPrepTime\n        );\n        break;\n      }\n\n      case 'subscription_upgrade': {\n        const upgradeAmount = req.body.amount || 20;\n        success = await sendSubscriptionUpgradeEmail(email, name, upgradeAmount);\n        break;\n      }\n\n      case 'subscription_downgrade': {\n        const { reason } = req.body;\n        success = await sendSubscriptionDowngradeEmail(\n          email, \n          name, \n          reason || 'payment failure after grace period'\n        );\n        break;\n      }\n\n      case 'subscription_renewal_reminder': {\n        const { renewalDate, renewalAmount, renewalLastFourDigits } = req.body;\n        if (!renewalDate) {\n          return res.status(400).json({ error: 'renewalDate is required for subscription_renewal_reminder emails' });\n        }\n        success = await sendSubscriptionRenewalReminderEmail(\n          email,\n          name,\n          new Date(renewalDate),\n          renewalAmount || 20,\n          renewalLastFourDigits\n        );\n        break;\n      }\n\n      case 'meal_rating_reminder': {\n        const { unratedMealsCount } = req.body;\n        if (!unratedMealsCount) {\n          return res.status(400).json({ error: 'unratedMealsCount is required for meal_rating_reminder emails' });\n        }\n        success = await sendMealRatingReminderEmail(email, name, unratedMealsCount);\n        break;\n      }\n\n      case 'password_reset': {\n        const { resetToken, expiresInHours } = req.body;\n        if (!resetToken) {\n          return res.status(400).json({ error: 'resetToken is required for password_reset emails' });\n        }\n        success = await sendPasswordResetEmail(\n          email,\n          name,\n          resetToken,\n          expiresInHours || 24\n        );\n        break;\n      }\n\n      default:\n        return res.status(400).json({ \n          error: 'Invalid email type. Must be one of: welcome, payment_failure, weekly_meal_plan, subscription_upgrade, subscription_downgrade, subscription_renewal_reminder, meal_rating_reminder, password_reset' \n        });\n    }\n\n    if (success) {\n      return res.status(200).json({ \n        message: 'Email sent successfully',\n        type,\n        recipient: email\n      });\n    } else {\n      return res.status(500).json({ error: 'Failed to send email' });\n    }\n  } catch (error) {\n    console.error('Error in send-email API:', error);\n    return res.status(500).json({ \n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}\n","size_bytes":4633},"pages/api/subscription.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'GET') {\n    const userId = req.query.userId as string;\n\n    const subscriptionData = {\n      userId: userId || '1',\n      plan: 'free',\n      status: 'active',\n      features: {\n        mealsPerMonth: 7,\n        cookbookAccess: 'limited',\n        totalMealsAvailable: 48\n      },\n      upgradeUrl: '/api/stripe/checkout'\n    };\n\n    return res.status(200).json(subscriptionData);\n  }\n\n  return res.status(405).json({ message: 'Method not allowed' });\n}\n","size_bytes":615},"pages/cookbooks.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/router';\nimport Layout from '../components/Layout';\nimport Head from 'next/head';\n\ninterface Cookbook {\n  id: string;\n  name: string;\n  slug: string;\n  theme: string;\n  description: string;\n  category: string;\n  tags: string[];\n  isPremium: boolean;\n  featured: boolean;\n  mealCount: number;\n  imageUrl?: string;\n  hasAccess?: boolean;\n}\n\nexport default function Cookbooks() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [cookbooks, setCookbooks] = useState<Cookbook[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [userPlan, setUserPlan] = useState<string>('free');\n\n  useEffect(() => {\n    if (status === 'loading') return;\n    \n    if (!session) {\n      router.push('/login?redirect=/cookbooks');\n      return;\n    }\n\n    fetchCookbooks();\n  }, [session, status]);\n\n  const fetchCookbooks = async () => {\n    try {\n      const response = await fetch('/api/cookbooks');\n      if (response.ok) {\n        const data = await response.json();\n        setCookbooks(data.cookbooks);\n        setUserPlan(data.userPlan || 'free');\n      }\n    } catch (error) {\n      console.error('Error fetching cookbooks:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCookbookClick = (cookbook: Cookbook) => {\n    if (cookbook.hasAccess || userPlan === 'pro') {\n      router.push(`/cookbooks/${cookbook.slug}`);\n    }\n  };\n\n  const unlockedCookbooks = cookbooks.filter(cb => cb.hasAccess);\n  const lockedCookbooks = cookbooks.filter(cb => !cb.hasAccess);\n  const totalMealsUnlocked = unlockedCookbooks.length * 12;\n\n  if (loading) {\n    return (\n      <Layout>\n        <div style={{ padding: '40px', textAlign: 'center' }}>\n          <p>Loading your cookbooks...</p>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <Head>\n        <title>Cookbooks - Full Gorilla Meal Planner</title>\n      </Head>\n      \n      <div className=\"cookbooks-page\">\n        <div className=\"welcome-section\">\n          <h1>ü¶ç YOUR COOKBOOK ARSENAL</h1>\n          \n          {userPlan === 'free' && (\n            <div className=\"freemium-message\">\n              <h2>JUST MONKEYING AROUND</h2>\n              <p>Based on your goals, we've unlocked <strong>4 cookbooks</strong> to fuel your journey:</p>\n              <div className=\"unlock-stats\">\n                <div className=\"stat\">\n                  <span className=\"stat-number\">{unlockedCookbooks.length}</span>\n                  <span className=\"stat-label\">COOKBOOKS UNLOCKED</span>\n                </div>\n                <div className=\"stat\">\n                  <span className=\"stat-number\">{totalMealsUnlocked}</span>\n                  <span className=\"stat-label\">RECIPES READY</span>\n                </div>\n              </div>\n              <p className=\"upgrade-hint\">\n                Ready for <strong>ALL 25 cookbooks</strong> and <strong>2,250+ recipes</strong>?\n              </p>\n              <button className=\"upgrade-btn\" onClick={() => router.push('/upgrade')}>\n                ü¶ç UNLEASH THE BEAST - GO PRO\n              </button>\n            </div>\n          )}\n\n          {userPlan === 'pro' && (\n            <div className=\"pro-message\">\n              <h2>ü¶ç FULL GORILLA UNLEASHED!</h2>\n              <p>You have <strong>complete access</strong> to all <strong>25 cookbooks</strong> and <strong>2,250+ recipes</strong>. Beast mode activated!</p>\n            </div>\n          )}\n        </div>\n\n        {unlockedCookbooks.length > 0 && (\n          <div className=\"cookbook-section\">\n            <h2 className=\"section-title\">‚úÖ YOUR UNLOCKED COOKBOOKS</h2>\n            <div className=\"cookbook-grid\">\n              {unlockedCookbooks.map((cookbook) => (\n                <div\n                  key={cookbook.id}\n                  className=\"cookbook-card unlocked\"\n                  onClick={() => handleCookbookClick(cookbook)}\n                >\n                  <div className=\"cookbook-image\">\n                    {cookbook.imageUrl ? (\n                      <img src={cookbook.imageUrl} alt={cookbook.name} />\n                    ) : (\n                      <div className=\"placeholder-image\">üìö</div>\n                    )}\n                  </div>\n                  <div className=\"cookbook-info\">\n                    <h3>{cookbook.name}</h3>\n                    <p className=\"cookbook-theme\">{cookbook.theme}</p>\n                    <span className=\"meal-count\">{cookbook.mealCount} recipes</span>\n                  </div>\n                  <div className=\"cookbook-badge unlocked-badge\">\n                    ‚úì Unlocked\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {userPlan === 'free' && lockedCookbooks.length > 0 && (\n          <div className=\"cookbook-section\">\n            <h2 className=\"section-title\">üîí UNLEASH THE FULL ARSENAL</h2>\n            <p className=\"section-subtitle\">\n              {lockedCookbooks.length} more cookbooks waiting for you with Full Gorilla Official (Pro)\n            </p>\n            <div className=\"cookbook-grid\">\n              {lockedCookbooks.map((cookbook) => (\n                <div\n                  key={cookbook.id}\n                  className=\"cookbook-card locked\"\n                  onClick={() => router.push('/upgrade')}\n                >\n                  <div className=\"cookbook-image locked-overlay\">\n                    {cookbook.imageUrl ? (\n                      <img src={cookbook.imageUrl} alt={cookbook.name} />\n                    ) : (\n                      <div className=\"placeholder-image\">üìö</div>\n                    )}\n                    <div className=\"lock-icon\">üîí</div>\n                  </div>\n                  <div className=\"cookbook-info\">\n                    <h3>{cookbook.name}</h3>\n                    <p className=\"cookbook-theme\">{cookbook.theme}</p>\n                    <span className=\"meal-count\">{cookbook.mealCount} recipes</span>\n                  </div>\n                  <div className=\"cookbook-badge locked-badge\">\n                    PRO ONLY\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <style jsx>{`\n        .cookbooks-page {\n          max-width: 1200px;\n          margin: 0 auto;\n          padding: 40px 20px;\n        }\n\n        .welcome-section {\n          text-align: center;\n          margin-bottom: 50px;\n        }\n\n        .welcome-section h1 {\n          font-size: 48px;\n          color: #1a1a1a;\n          margin-bottom: 30px;\n          font-weight: 900;\n          text-transform: uppercase;\n        }\n\n        .freemium-message {\n          background: #1a1a1a;\n          color: white;\n          padding: 50px 40px;\n          border-radius: 20px;\n          margin-bottom: 40px;\n          border: 3px solid #00ff88;\n          box-shadow: 0 10px 40px rgba(0, 255, 136, 0.2);\n        }\n\n        .freemium-message h2 {\n          font-size: 32px;\n          margin-bottom: 15px;\n          color: #00ff88;\n          font-weight: 900;\n          text-transform: uppercase;\n        }\n\n        .freemium-message p {\n          font-size: 18px;\n          line-height: 1.6;\n          margin: 15px 0;\n        }\n\n        .unlock-stats {\n          display: flex;\n          justify-content: center;\n          gap: 60px;\n          margin: 30px 0;\n        }\n\n        .stat {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n\n        .stat-number {\n          font-size: 56px;\n          font-weight: 900;\n          color: #00ff88;\n        }\n\n        .stat-label {\n          font-size: 13px;\n          color: #1a1a1a;\n          margin-top: 8px;\n          font-weight: 700;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n        }\n\n        .upgrade-hint {\n          font-size: 20px;\n          margin: 25px 0 20px;\n          font-weight: 500;\n        }\n\n        .upgrade-btn {\n          background: #00ff88;\n          color: #1a1a1a;\n          padding: 16px 40px;\n          font-size: 16px;\n          font-weight: 900;\n          border: none;\n          border-radius: 50px;\n          cursor: pointer;\n          transition: all 0.3s;\n          box-shadow: 0 6px 20px rgba(0, 255, 136, 0.4);\n          text-transform: uppercase;\n        }\n\n        .upgrade-btn:hover {\n          transform: translateY(-2px);\n          box-shadow: 0 8px 25px rgba(0, 255, 136, 0.5);\n        }\n\n        .pro-message {\n          background: linear-gradient(135deg, #00ff88 0%, #00cc6a 100%);\n          color: #1a1a1a;\n          padding: 40px;\n          border-radius: 20px;\n          margin-bottom: 40px;\n          border: 3px solid #00ff88;\n        }\n\n        .pro-message h2 {\n          font-size: 32px;\n          margin-bottom: 10px;\n          font-weight: 900;\n          text-transform: uppercase;\n        }\n\n        .cookbook-section {\n          margin-bottom: 50px;\n        }\n\n        .section-title {\n          font-size: 32px;\n          color: #1a1a1a;\n          margin-bottom: 10px;\n          font-weight: 900;\n          text-transform: uppercase;\n        }\n\n        .section-subtitle {\n          font-size: 17px;\n          color: #1a1a1a;\n          margin-bottom: 30px;\n          font-weight: 600;\n        }\n\n        .cookbook-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n          gap: 25px;\n        }\n\n        .cookbook-card {\n          background: white;\n          border-radius: 16px;\n          overflow: hidden;\n          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n          transition: all 0.3s;\n          cursor: pointer;\n          position: relative;\n          border: 3px solid #00ff88;\n        }\n\n        .cookbook-card:hover {\n          transform: translateY(-8px);\n          box-shadow: 0 12px 30px rgba(0, 255, 136, 0.2);\n        }\n\n        .cookbook-card.locked {\n          opacity: 0.7;\n        }\n\n        .cookbook-card.locked:hover {\n          opacity: 0.9;\n        }\n\n        .cookbook-image {\n          width: 100%;\n          height: 200px;\n          position: relative;\n          overflow: hidden;\n        }\n\n        .cookbook-image img {\n          width: 100%;\n          height: 100%;\n          object-fit: cover;\n        }\n\n        .placeholder-image {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);\n          font-size: 64px;\n        }\n\n        .locked-overlay {\n          position: relative;\n        }\n\n        .locked-overlay::after {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.4);\n        }\n\n        .lock-icon {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          font-size: 48px;\n          z-index: 2;\n        }\n\n        .cookbook-info {\n          padding: 20px;\n        }\n\n        .cookbook-info h3 {\n          font-size: 20px;\n          color: #1a1a1a;\n          margin-bottom: 8px;\n        }\n\n        .cookbook-theme {\n          font-size: 14px;\n          color: #1a1a1a;\n          line-height: 1.4;\n          margin-bottom: 12px;\n          font-weight: 500;\n        }\n\n        .meal-count {\n          display: inline-block;\n          background: #00ff88;\n          padding: 6px 14px;\n          border-radius: 12px;\n          font-size: 12px;\n          color: #1a1a1a;\n          font-weight: 800;\n          text-transform: uppercase;\n        }\n\n        .cookbook-badge {\n          position: absolute;\n          top: 15px;\n          right: 15px;\n          padding: 6px 14px;\n          border-radius: 20px;\n          font-size: 12px;\n          font-weight: 700;\n          z-index: 3;\n        }\n\n        .unlocked-badge {\n          background: #00ff88;\n          color: #1a1a1a;\n          font-weight: 900;\n        }\n\n        .locked-badge {\n          background: rgba(26, 26, 26, 0.9);\n          color: #00ff88;\n          font-weight: 900;\n        }\n\n        @media (max-width: 768px) {\n          .cookbooks-page {\n            padding: 20px 15px;\n          }\n\n          .welcome-section h1 {\n            font-size: 32px;\n          }\n\n          .freemium-message {\n            padding: 25px;\n          }\n\n          .freemium-message h2 {\n            font-size: 22px;\n          }\n\n          .unlock-stats {\n            gap: 30px;\n          }\n\n          .stat-number {\n            font-size: 36px;\n          }\n\n          .cookbook-grid {\n            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n            gap: 20px;\n          }\n        }\n      `}</style>\n    </Layout>\n  );\n}\n","size_bytes":12939},"pages/dashboard.tsx":{"content":"import { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport Layout from '../components/Layout';\nimport DashboardCalendar from '../components/DashboardCalendar';\n\nexport default function Dashboard() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [mealPlan, setMealPlan] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/login');\n    }\n  }, [status, router]);\n\n  useEffect(() => {\n    const fetchMealPlan = async () => {\n      try {\n        const response = await fetch('/api/meals');\n        const data = await response.json();\n        setMealPlan(data);\n      } catch (error) {\n        console.error('Error fetching meal plan:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (session) {\n      fetchMealPlan();\n    }\n  }, [session]);\n\n  if (status === 'loading' || loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Layout>\n      <Head>\n        <title>Dashboard - Full Gorilla Meal Planner</title>\n      </Head>\n      <div style={{ padding: '40px 20px', background: '#f5f5f5', minHeight: 'calc(100vh - 80px)' }}>\n        <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\n          <div style={{ marginBottom: '40px' }}>\n            <h1 style={{ fontSize: '48px', fontWeight: '900', color: '#1a1a1a', marginBottom: '10px', textTransform: 'uppercase' }}>\n              Welcome Back, {session?.user?.name || 'Beast'}! ü¶ç\n            </h1>\n            <p style={{ fontSize: '20px', color: '#555', fontWeight: '500' }}>Your weekly meal plan to unleash your potential</p>\n          </div>\n          \n          <DashboardCalendar mealPlan={mealPlan} />\n\n          <div style={{ marginTop: '50px', background: '#1a1a1a', padding: '40px', borderRadius: '20px', border: '3px solid #00ff88' }}>\n            <h2 style={{ color: '#00ff88', fontSize: '32px', fontWeight: '900', textTransform: 'uppercase', marginBottom: '25px' }}>Quick Actions</h2>\n            <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap' }}>\n              <button \n                onClick={() => router.push('/cookbooks')}\n                style={{ padding: '16px 35px', background: '#00ff88', color: '#1a1a1a', border: 'none', cursor: 'pointer', borderRadius: '50px', fontSize: '16px', fontWeight: '900', textTransform: 'uppercase', boxShadow: '0 6px 20px rgba(0, 255, 136, 0.4)' }}\n              >\n                Browse Cookbooks\n              </button>\n              <button \n                onClick={() => router.push('/questionnaire')}\n                style={{ padding: '16px 35px', background: 'transparent', color: '#00ff88', border: '3px solid #00ff88', cursor: 'pointer', borderRadius: '50px', fontSize: '16px', fontWeight: '900', textTransform: 'uppercase' }}\n              >\n                Update Preferences\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":3100},"pages/login.tsx":{"content":"import { signIn } from 'next-auth/react';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    const result = await signIn('credentials', {\n      redirect: false,\n      email,\n      password,\n    });\n\n    if (result?.error) {\n      setError('Invalid email or password');\n    } else {\n      router.push('/dashboard');\n    }\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Login - Full Gorilla Meal Planner</title>\n      </Head>\n      <div style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)', display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '20px' }}>\n        <div style={{ maxWidth: '450px', width: '100%', background: '#2d2d2d', padding: '50px 40px', borderRadius: '20px', border: '3px solid #00ff88' }}>\n          <h1 style={{ color: '#00ff88', fontSize: '42px', fontWeight: '900', textTransform: 'uppercase', marginBottom: '10px', textAlign: 'center' }}>Welcome Back</h1>\n          <p style={{ color: '#aaa', textAlign: 'center', marginBottom: '40px', fontSize: '16px' }}>Ready to unleash your inner beast?</p>\n          \n          <form onSubmit={handleSubmit}>\n            {error && <p style={{ color: '#ff4444', background: '#331111', padding: '12px', borderRadius: '8px', marginBottom: '20px', textAlign: 'center' }}>{error}</p>}\n            \n            <div style={{ marginBottom: '25px' }}>\n              <label htmlFor=\"email\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Email</label>\n              <input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none', transition: 'border 0.3s' }}\n                onFocus={(e) => e.target.style.border = '2px solid #00ff88'}\n                onBlur={(e) => e.target.style.border = '2px solid #444'}\n              />\n            </div>\n            \n            <div style={{ marginBottom: '30px' }}>\n              <label htmlFor=\"password\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Password</label>\n              <input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none', transition: 'border 0.3s' }}\n                onFocus={(e) => e.target.style.border = '2px solid #00ff88'}\n                onBlur={(e) => e.target.style.border = '2px solid #444'}\n              />\n            </div>\n            \n            <button type=\"submit\" style={{ width: '100%', padding: '16px', background: '#00ff88', color: '#1a1a1a', border: 'none', cursor: 'pointer', borderRadius: '50px', fontSize: '18px', fontWeight: '900', textTransform: 'uppercase', boxShadow: '0 6px 20px rgba(0, 255, 136, 0.4)', transition: 'transform 0.2s' }} onMouseOver={(e) => e.currentTarget.style.transform = 'scale(1.02)'} onMouseOut={(e) => e.currentTarget.style.transform = 'scale(1)'}>\n              Login\n            </button>\n          </form>\n          \n          <p style={{ marginTop: '30px', textAlign: 'center', color: '#aaa', fontSize: '15px' }}>\n            Don't have an account? <Link href=\"/signup\" style={{ color: '#00ff88', fontWeight: '700', textDecoration: 'none' }}>Sign up</Link>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":4219},"pages/questionnaire.tsx":{"content":"import { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Layout from '../components/Layout';\nimport QuestionnaireForm from '../components/QuestionnaireForm';\n\nexport default function Questionnaire() {\n  const router = useRouter();\n  const [responses, setResponses] = useState({});\n\n  const handleComplete = async (data: any) => {\n    try {\n      const response = await fetch('/api/questionnaire', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        router.push('/dashboard');\n      }\n    } catch (error) {\n      console.error('Error submitting questionnaire:', error);\n    }\n  };\n\n  return (\n    <Layout>\n      <Head>\n        <title>Questionnaire - Full Gorilla Meal Planner</title>\n      </Head>\n      <div style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>\n        <h1>Personalize Your Meal Plan</h1>\n        <p>Answer these questions to help us create the perfect meal plan for you.</p>\n        \n        <QuestionnaireForm onComplete={handleComplete} />\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":1172},"pages/signup.tsx":{"content":"import { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\nexport default function Signup() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    age: '',\n    gender: '',\n    accountType: 'individual',\n    plan: 'free'\n  });\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        router.push('/questionnaire');\n      } else {\n        const data = await response.json();\n        setError(data.message || 'Signup failed');\n      }\n    } catch (err) {\n      setError('An error occurred during signup');\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Sign Up - Full Gorilla Meal Planner</title>\n      </Head>\n      <div style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)', display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '40px 20px' }}>\n        <div style={{ maxWidth: '550px', width: '100%', background: '#2d2d2d', padding: '50px 40px', borderRadius: '20px', border: '3px solid #00ff88' }}>\n          <div style={{ textAlign: 'center', marginBottom: '30px' }}>\n            <Image \n              src=\"/images/full-gorilla-logo-white.png\" \n              alt=\"Full Gorilla\" \n              width={200}\n              height={100}\n              style={{ \n                width: '200px',\n                height: 'auto',\n                filter: 'drop-shadow(0 8px 20px rgba(0, 255, 136, 0.3))'\n              }} \n              priority\n            />\n          </div>\n          <h1 style={{ color: '#00ff88', fontSize: '42px', fontWeight: '900', textTransform: 'uppercase', marginBottom: '10px', textAlign: 'center' }}>Join The Pack</h1>\n          <p style={{ color: '#aaa', textAlign: 'center', marginBottom: '40px', fontSize: '16px' }}>Start your journey to beast-mode nutrition</p>\n          \n          <form onSubmit={handleSubmit}>\n            {error && <p style={{ color: '#ff4444', background: '#331111', padding: '12px', borderRadius: '8px', marginBottom: '20px', textAlign: 'center' }}>{error}</p>}\n            \n            <div style={{ marginBottom: '20px' }}>\n              <label htmlFor=\"name\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Full Name</label>\n              <input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                value={formData.name}\n                onChange={handleChange}\n                required\n                style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none' }}\n              />\n            </div>\n\n            <div style={{ marginBottom: '20px' }}>\n              <label htmlFor=\"email\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Email</label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n                style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none' }}\n              />\n            </div>\n\n            <div style={{ marginBottom: '20px' }}>\n              <label htmlFor=\"password\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Password</label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n                style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none' }}\n              />\n            </div>\n\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '20px' }}>\n              <div>\n                <label htmlFor=\"age\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Age</label>\n                <input\n                  id=\"age\"\n                  name=\"age\"\n                  type=\"number\"\n                  value={formData.age}\n                  onChange={handleChange}\n                  required\n                  style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none' }}\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"gender\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Gender</label>\n                <select\n                  id=\"gender\"\n                  name=\"gender\"\n                  value={formData.gender}\n                  onChange={handleChange}\n                  required\n                  style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none' }}\n                >\n                  <option value=\"\">Select...</option>\n                  <option value=\"male\">Male</option>\n                  <option value=\"female\">Female</option>\n                </select>\n              </div>\n            </div>\n\n            <div style={{ marginBottom: '20px' }}>\n              <label htmlFor=\"accountType\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Account Type</label>\n              <select\n                id=\"accountType\"\n                name=\"accountType\"\n                value={formData.accountType}\n                onChange={handleChange}\n                style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none' }}\n              >\n                <option value=\"individual\">Individual</option>\n                <option value=\"couple\">Couple</option>\n                <option value=\"family\">Family (up to 4)</option>\n              </select>\n            </div>\n\n            <div style={{ marginBottom: '30px' }}>\n              <label htmlFor=\"plan\" style={{ color: '#00ff88', fontWeight: '700', fontSize: '14px', textTransform: 'uppercase', display: 'block', marginBottom: '8px' }}>Choose Your Level</label>\n              <select\n                id=\"plan\"\n                name=\"plan\"\n                value={formData.plan}\n                onChange={handleChange}\n                style={{ width: '100%', padding: '14px 18px', background: '#1a1a1a', border: '2px solid #444', borderRadius: '12px', color: 'white', fontSize: '16px', outline: 'none' }}\n              >\n                <option value=\"free\">Just Monkeying Around (Free - 7 days/month)</option>\n                <option value=\"paid\">Full Gorilla Official (Pro - $9.99/mo)</option>\n              </select>\n            </div>\n\n            <button type=\"submit\" style={{ width: '100%', padding: '16px', background: '#00ff88', color: '#1a1a1a', border: 'none', cursor: 'pointer', borderRadius: '50px', fontSize: '18px', fontWeight: '900', textTransform: 'uppercase', boxShadow: '0 6px 20px rgba(0, 255, 136, 0.4)' }}>\n              Unleash The Beast!\n            </button>\n          </form>\n          \n          <p style={{ marginTop: '30px', textAlign: 'center', color: '#aaa', fontSize: '15px' }}>\n            Already have an account? <Link href=\"/login\" style={{ color: '#00ff88', fontWeight: '700', textDecoration: 'none' }}>Login</Link>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":8620},"replit.md":{"content":"# Full Gorilla Meal Planner\n\n## Overview\nFull Gorilla Meal Planner is a web application designed to foster healthier eating habits through personalized weekly meal plans and automated grocery lists. It offers 2,250 recipes across 25 themed cookbooks, available through free and paid subscription tiers. Users complete a questionnaire to define health goals, dietary restrictions, and preferences, which the system uses to generate portion-adjusted meal plans and grocery lists. A feedback system allows users to rate meals, influencing future recommendations. The project aims to provide comprehensive meal planning for individuals, couples, and families, supporting a healthier lifestyle.\n\n## User Preferences\n**Experience Level**: Complete beginner - no coding, website, or app experience\n**Communication Style**: Simple, everyday language with step-by-step instructions\n**Support Needed**: Full developer/architect/engineer support\n**Question Limit**: Maximum 2 questions at a time for clarification and brainstorming\n**Instruction Style**: Detailed, easy-to-follow steps for non-technical users\n\n## System Architecture\n\n### Frontend\nThe frontend is built with **Next.js 14.1.0**, **TypeScript**, and **React 18.2.0**, utilizing a page-based routing architecture for core functionalities like the landing page, authentication, dashboard, cookbooks, and a comprehensive questionnaire. It employs modular React components for reusability (e.g., `Layout`, `DashboardCalendar`, `MealCard`, `CookbookTile`, `QuestionnaireForm`). State management is handled using React hooks and session management via NextAuth. Styling is implemented with inline styles and CSS modules, prioritizing accessibility with a color-blind friendly palette.\n\n### Backend\nThe backend utilizes **Next.js API routes** for a RESTful API structure, handling authentication, user preferences, meal plan retrieval, cookbook data, and subscription management. **NextAuth.js** provides session-based authentication with JWT tokens, securing protected routes. Core business logic for meal plan generation and subscription tier management is encapsulated in utility modules.\n\n### Data Storage\nCurrently, the application uses **file-based JSON storage** for static data like cookbooks and recipes. The system is designed for future migration to a robust database, with an intended schema for user profiles, preferences, meal plans, feedback, and subscription data.\n\n### Subscription & Access Control\nThe platform offers Free and Pro subscription tiers. The Free Plan provides one weekly meal plan per month from 4 cookbooks, while the Pro Plan offers unlimited weekly plans from all 25 cookbooks. A future Pro Plus plan will introduce manual meal selection and custom recipes. Account types (Individual, Couple, Family) influence portion sizing and meal frequency. Access to features is gated based on the subscription tier, with upgrade prompts for free users.\n\n### Meal Generation Algorithm\nThe `mealPlanner.ts` utility generates weekly meal plans (Sunday-Saturday) by filtering recipes based on user questionnaire data, matching preferences, balancing nutritional targets, and avoiding repetition. The system autonomously selects meals, and users provide feedback via a 5-star rating system, which influences future recommendations. Meals rated 2 stars or below are permanently removed from the user's rotation.\n\n### Comprehensive Questionnaire System\nA **60-question smart branching questionnaire** collects detailed wellness, fitness, and lifestyle data for each household member. This data powers the personalized meal planning algorithm. The questionnaire is structured into sections covering account setup, basic profile, health goals, medical history, dietary preferences, sleep/hydration, fitness, cooking logistics, grocery/budget, and lifestyle. It features smart branching logic to skip irrelevant questions, multi-family member support, various input types (radio, checkbox, text, number, height, slider), real-time validation, and progress tracking. An API endpoint (`/api/questionnaire`) handles data persistence, utilizing a Prisma transaction to save records for household logistics, family members, and profiles.\n\n### Email System\nThe application integrates **SendGrid** via `@sendgrid/mail` for a comprehensive email system. It supports various HTML-formatted, branded, and personalized email templates for customer onboarding (Welcome), meal planning (Weekly Meal Plan, Meal Rating Reminder), subscription management (Payment Failure, Upgrade/Downgrade Confirmation, Renewal Reminder), and account security (Password Reset). Emails feature dynamic personalization, rich HTML formatting, clear calls-to-action, and responsive design.\n\n## External Dependencies\n\n### Authentication & Session Management\n- **NextAuth.js v4.24.7**: Authentication framework, currently configured with credentials provider.\n\n### Payment Processing\n- **Stripe v12.18.0**: Payment processing for subscriptions (placeholder endpoints exist).\n\n### HTTP Client\n- **Axios v1.6.7**: For API requests.\n\n### Development Tools\n- **TypeScript 5.3.3**: For type safety.\n- **ESLint 8.56.0**: For code quality.\n\n### Utility Libraries\n- **clsx v2.0.0**: Conditional `className` composition.\n- **uuid v9.0.1**: Unique identifier generation.\n\n### Infrastructure Notes\n- Development server on port 5000.\n- No database currently configured; static JSON data used for development.\n- Email service (SendGrid) is integrated.","size_bytes":5463},"utils/cookbookAssignment.ts":{"content":"import { cookbooksData, CookbookData } from '../data/cookbooksData';\n\ninterface QuestionnaireResponses {\n  q11?: string[];\n  q25?: string;\n  q30?: string[];\n  q17?: string[];\n  q20?: string[];\n  q23?: string[];\n  q24?: string[];\n  q53?: string;\n}\n\nexport function assignCookbooksBasedOnPreferences(\n  primaryResponses: QuestionnaireResponses,\n  familyMembers: Array<{responses: QuestionnaireResponses}>\n): string[] {\n  const scores: Map<string, number> = new Map();\n  \n  cookbooksData.forEach(cookbook => {\n    scores.set(cookbook.slug, 0);\n  });\n\n  const allResponses = [primaryResponses, ...familyMembers.map(m => m.responses)];\n\n  allResponses.forEach(responses => {\n    const healthGoals = responses.q11 || [];\n    const dietType = responses.q25;\n    const favoriteCuisines = responses.q30 || [];\n    const medicalConditions = responses.q17 || [];\n    const hormonalConcerns = responses.q20 || [];\n    const allergies = responses.q23 || [];\n    const intolerances = responses.q24 || [];\n\n    cookbooksData.forEach(cookbook => {\n      let score = scores.get(cookbook.slug) || 0;\n\n      if (dietType === 'vegan' && cookbook.slug === 'vegan-whole-foods') {\n        score += 50;\n      }\n      \n      if (dietType === 'vegetarian' && cookbook.slug === 'vegetarian-balance') {\n        score += 50;\n      }\n\n      if (dietType === 'keto' && cookbook.slug === 'keto-reset') {\n        score += 50;\n      }\n\n      if (dietType === 'paleo' && cookbook.slug === 'paleo-lifestyle') {\n        score += 50;\n      }\n\n      if (dietType === 'pescatarian' && cookbook.slug === 'mediterranean-middle-eastern') {\n        score += 30;\n      }\n\n      if ((allergies.includes('wheat-gluten') || intolerances.includes('gluten')) \n          && cookbook.slug === 'gluten-free-everyday') {\n        score += 40;\n      }\n\n      if ((allergies.includes('dairy') || intolerances.includes('lactose')) \n          && cookbook.slug === 'dairy-free-solutions') {\n        score += 40;\n      }\n\n      if (healthGoals.includes('gut-health') && cookbook.slug === 'healthy-gut') {\n        score += 35;\n      }\n\n      if (healthGoals.includes('mental-clarity') && cookbook.slug === 'brain-energy-boosting') {\n        score += 35;\n      }\n\n      if (healthGoals.includes('heart-health') && cookbook.slug === 'heart-healthy-meals') {\n        score += 35;\n      }\n\n      if (healthGoals.includes('build-muscle') && cookbook.slug === 'lean-muscle-athletic-recovery') {\n        score += 35;\n      }\n\n      if (healthGoals.includes('lose-weight') && cookbook.slug === 'weight-loss-made-easy') {\n        score += 35;\n      }\n\n      if (healthGoals.includes('gain-weight') && cookbook.slug === 'healthy-weight-gain') {\n        score += 35;\n      }\n\n      if ((hormonalConcerns.includes('pcos-endo') || hormonalConcerns.includes('menopause')) \n          && cookbook.slug === 'hormone-balance-womens-health') {\n        score += 30;\n      }\n\n      if (healthGoals.includes('longevity') && cookbook.slug === 'blue-zones-longevity') {\n        score += 30;\n      }\n\n      favoriteCuisines.forEach(cuisine => {\n        cookbook.tags.forEach(tag => {\n          if (tag.toLowerCase().includes(cuisine.toLowerCase()) || \n              cuisine.toLowerCase().includes(tag.toLowerCase())) {\n            score += 20;\n          }\n        });\n      });\n\n      scores.set(cookbook.slug, score);\n    });\n  });\n\n  const cookingTime = primaryResponses.q53;\n  if (cookingTime === '3-meals' || cookingTime === 'dinner-only') {\n    const quickScore = scores.get('quick-budget-friendly') || 0;\n    scores.set('quick-budget-friendly', quickScore + 25);\n  }\n\n  if (cookingTime === '6-meals') {\n    const snackScore = scores.get('power-snacks-small-plates') || 0;\n    scores.set('power-snacks-small-plates', snackScore + 20);\n  }\n\n  const freeTierSlugs = cookbooksData\n    .filter(cb => !cb.isPremium)\n    .map(cb => cb.slug);\n\n  freeTierSlugs.forEach(slug => {\n    const currentScore = scores.get(slug) || 0;\n    scores.set(slug, currentScore + 10);\n  });\n\n  const sortedCookbooks = Array.from(scores.entries())\n    .sort((a, b) => b[1] - a[1]);\n\n  const selected: string[] = [];\n  \n  for (const [slug, score] of sortedCookbooks) {\n    if (selected.length >= 4) break;\n    selected.push(slug);\n  }\n\n  while (selected.length < 4) {\n    const remaining = cookbooksData\n      .filter(cb => !selected.includes(cb.slug))\n      .sort((a, b) => {\n        if (a.featured && !b.featured) return -1;\n        if (!a.featured && b.featured) return 1;\n        return 0;\n      });\n    \n    if (remaining.length > 0) {\n      selected.push(remaining[0].slug);\n    }\n  }\n\n  return selected;\n}\n\nexport function getCookbookDetails(slugs: string[]): CookbookData[] {\n  return slugs\n    .map(slug => cookbooksData.find(cb => cb.slug === slug))\n    .filter((cb): cb is CookbookData => cb !== undefined);\n}\n","size_bytes":4812},"utils/email.ts":{"content":"import sgMail from '@sendgrid/mail';\n\nasync function getCredentials() {\n  if (process.env.REPLIT_CONNECTORS_HOSTNAME) {\n    const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n    const xReplitToken = process.env.REPL_IDENTITY \n      ? 'repl ' + process.env.REPL_IDENTITY \n      : process.env.WEB_REPL_RENEWAL \n      ? 'depl ' + process.env.WEB_REPL_RENEWAL \n      : null;\n\n    if (xReplitToken) {\n      try {\n        const connectionSettings = await fetch(\n          'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=sendgrid',\n          {\n            headers: {\n              'Accept': 'application/json',\n              'X_REPLIT_TOKEN': xReplitToken\n            }\n          }\n        ).then(res => res.json()).then(data => data.items?.[0]);\n\n        if (connectionSettings && connectionSettings.settings.api_key && connectionSettings.settings.from_email) {\n          return {\n            apiKey: connectionSettings.settings.api_key, \n            email: connectionSettings.settings.from_email\n          };\n        }\n      } catch (error) {\n        console.warn('Failed to fetch Replit connector credentials, falling back to environment variables');\n      }\n    }\n  }\n\n  const apiKey = process.env.SENDGRID_API_KEY;\n  const email = process.env.SENDGRID_FROM_EMAIL;\n\n  if (!apiKey || !email) {\n    throw new Error('SendGrid credentials not found. Set SENDGRID_API_KEY and SENDGRID_FROM_EMAIL environment variables.');\n  }\n\n  return { apiKey, email };\n}\n\nasync function getUncachableSendGridClient() {\n  const {apiKey, email} = await getCredentials();\n  sgMail.setApiKey(apiKey);\n  return {\n    client: sgMail,\n    fromEmail: email\n  };\n}\n\nconst emailStyles = `\n  body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n  .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n  .header { background-color: #2e7d32; color: white; padding: 30px 20px; text-align: center; border-radius: 5px 5px 0 0; }\n  .header h1 { margin: 0; font-size: 28px; }\n  .content { background-color: #f9f9f9; padding: 30px; border-radius: 0 0 5px 5px; }\n  .button { display: inline-block; padding: 14px 40px; background-color: #2e7d32; color: white; text-decoration: none; border-radius: 5px; margin-top: 20px; font-weight: bold; }\n  .button:hover { background-color: #1b5e20; }\n  .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666; }\n  .warning { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0; border-radius: 3px; }\n  .success { background-color: #d4edda; border-left: 4px solid #28a745; padding: 15px; margin: 20px 0; border-radius: 3px; }\n  .info { background-color: #d1ecf1; border-left: 4px solid #17a2b8; padding: 15px; margin: 20px 0; border-radius: 3px; }\n  .highlight { background-color: #e8f5e9; padding: 20px; border-radius: 5px; margin: 20px 0; }\n  .steps { background-color: white; padding: 20px; border-radius: 5px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }\n  .step { margin: 15px 0; padding: 10px; border-left: 3px solid #2e7d32; }\n  .meal-preview { background-color: white; padding: 15px; margin: 10px 0; border-radius: 5px; border: 1px solid #ddd; }\n  .stats-box { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; text-align: center; }\n  .stat-item { display: inline-block; margin: 0 15px; }\n  .stat-number { font-size: 24px; font-weight: bold; color: #2e7d32; display: block; }\n  .stat-label { font-size: 12px; color: #666; }\n  .price { font-size: 24px; font-weight: bold; color: #2e7d32; }\n  ul { padding-left: 20px; }\n  li { margin: 8px 0; }\n  h2 { color: #2e7d32; margin-top: 0; }\n  h3 { color: #333; margin-top: 0; }\n  .support-box { background-color: #f0f0f0; padding: 15px; border-radius: 5px; margin-top: 20px; text-align: center; }\n`;\n\nexport interface EmailOptions {\n  to: string;\n  subject: string;\n  html: string;\n}\n\nexport async function sendEmail(options: EmailOptions): Promise<boolean> {\n  try {\n    const {client, fromEmail} = await getUncachableSendGridClient();\n    \n    const msg = {\n      to: options.to,\n      from: fromEmail,\n      subject: options.subject,\n      html: options.html,\n    };\n\n    await client.send(msg);\n    console.log('Email sent successfully to:', options.to);\n    return true;\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return false;\n  }\n}\n\nexport async function sendWelcomeEmail(\n  userEmail: string,\n  userName: string,\n  accountType: string = 'individual'\n): Promise<boolean> {\n  const accountTypeText = accountType === 'family' ? 'family of 4' : accountType === 'couple' ? 'couple' : 'individual';\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Welcome to Full Gorilla!</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p style=\"font-size: 16px;\">Welcome to the Full Gorilla Meal Planner family! We're thrilled to have you join our community of health-conscious eaters building better habits through personalized meal planning.</p>\n          \n          <div class=\"success\">\n            <strong>üéâ Your ${accountTypeText} account is active!</strong> You now have access to one full week of personalized meal planning per month.\n          </div>\n          \n          <div class=\"steps\">\n            <h3>Get Started in 4 Easy Steps:</h3>\n            <div class=\"step\">\n              <strong>1. Complete Your Profile</strong><br>\n              Tell us about your health goals, dietary restrictions, cooking preferences, and favorite cuisines. This takes just 3 minutes and helps us create the perfect meal plan for you.\n            </div>\n            <div class=\"step\">\n              <strong>2. We Create Your Meal Plan</strong><br>\n              Based on your preferences, our system intelligently selects recipes from 48 meals across 4 cookbooks that match your goals and taste. Your personalized Sunday-Saturday meal plan will be sent directly to your inbox!\n            </div>\n            <div class=\"step\">\n              <strong>3. Get Your Grocery List</strong><br>\n              We automatically generate a shopping list with all ingredients you need - organized by category to make shopping easy.\n            </div>\n            <div class=\"step\">\n              <strong>4. Cook, Eat & Rate</strong><br>\n              Try your meals and rate them! On Saturday, we'll ask for your feedback. Meals rated 3+ stars stay in your rotation, while 2 stars or below are removed.\n            </div>\n          </div>\n          \n          <center>\n            <a href=\"${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/questionnaire\" class=\"button\">Complete Your Profile Now ‚Üí</a>\n          </center>\n          \n          <div class=\"highlight\">\n            <h3>What's Included in Your Free Account:</h3>\n            <ul>\n              <li><strong>One Full Week</strong> (Sunday-Saturday) of meal planning per month</li>\n              <li><strong>48 Curated Recipes</strong> from 4 themed cookbooks to choose from</li>\n              <li><strong>Intelligent Meal Selection</strong> - we pick the perfect meals for your goals</li>\n              <li><strong>Auto-Generated Grocery Lists</strong> organized by category</li>\n              <li><strong>Nutritional Information</strong> for every meal</li>\n              <li><strong>Portion Adjustments</strong> customized for your ${accountTypeText} needs</li>\n            </ul>\n          </div>\n          \n          <div class=\"info\">\n            <h3>üöÄ Want More?</h3>\n            <p style=\"margin: 10px 0;\"><strong>Upgrade to Pro</strong> for unlimited access to all 2,250 recipes across 25 themed cookbooks - from Mediterranean to Asian Fusion, Keto to Vegetarian!</p>\n            <p style=\"margin: 0;\">Just $20/month. Upgrade anytime from your dashboard.</p>\n          </div>\n          \n          <p style=\"margin-top: 30px; font-size: 16px;\">Ready to transform your eating habits? Let's get started! üí™</p>\n          \n          <p style=\"margin-top: 20px;\">Cheers,<br><strong>The Full Gorilla Team</strong></p>\n          \n          <div class=\"support-box\">\n            <p style=\"margin: 0;\"><strong>Need Help?</strong> Reply to this email anytime - we're here for you!</p>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n          <p style=\"margin-top: 10px;\">You're receiving this because you signed up for Full Gorilla Meal Planner.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: 'üéâ Welcome to Full Gorilla - Let\\'s Build Healthy Habits Together!',\n    html\n  });\n}\n\nexport async function sendPaymentFailureEmail(\n  userEmail: string, \n  userName: string,\n  gracePeriodEnd: Date,\n  amount: number = 20,\n  lastFourDigits?: string,\n  failureReason?: string\n): Promise<boolean> {\n  const formattedDate = gracePeriodEnd.toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const paymentMethodText = lastFourDigits ? `card ending in ${lastFourDigits}` : 'your payment method';\n  const reasonText = failureReason ? `<p style=\"color: #666;\"><em>Reason: ${failureReason}</em></p>` : '';\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Full Gorilla Meal Planner</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p>We attempted to process your monthly subscription payment of <strong>$${amount}</strong> using ${paymentMethodText}, but the payment didn't go through.</p>\n          \n          ${reasonText}\n          \n          <div class=\"warning\">\n            <strong>‚è∞ Your account is still active!</strong><br>\n            You have until <strong>${formattedDate}</strong> (3 days) to update your payment method. Your meal plans and recipes remain accessible during this time.\n          </div>\n          \n          <h3>What Happens Next:</h3>\n          <div class=\"steps\">\n            <div class=\"step\">\n              <strong>Now - ${formattedDate}:</strong> Your Pro account remains fully active with access to all 2,250 recipes and unlimited meal planning.\n            </div>\n            <div class=\"step\">\n              <strong>Update Your Payment:</strong> Click the button below to add a new payment method or update your current one. It only takes 2 minutes!\n            </div>\n            <div class=\"step\">\n              <strong>After ${formattedDate}:</strong> If we can't process payment, your account will automatically switch to the Free plan (one full week of meal planning per month from 48 recipes across 4 cookbooks).\n            </div>\n          </div>\n          \n          <center>\n            <a href=\"${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/dashboard?tab=billing\" class=\"button\">Update Payment Method ‚Üí</a>\n          </center>\n          \n          <div class=\"info\">\n            <h3>üí≥ Common Payment Issues:</h3>\n            <ul>\n              <li>Insufficient funds in account</li>\n              <li>Card has expired or been replaced</li>\n              <li>Billing address doesn't match card</li>\n              <li>Card issuer declined the charge</li>\n            </ul>\n            <p style=\"margin: 10px 0;\">Most issues are resolved by updating your payment information or trying a different card.</p>\n          </div>\n          \n          <p style=\"margin-top: 30px;\">We don't want you to lose access to your favorite recipes and meal plans! If you have questions or need help, just reply to this email.</p>\n          \n          <p style=\"margin-top: 20px;\">Keep crushing those health goals! üí™<br><strong>The Full Gorilla Team</strong></p>\n          \n          <div class=\"support-box\">\n            <p style=\"margin: 0;\"><strong>Need Help?</strong> Email us at support@fullgorilla.com or reply to this message.</p>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: '‚ö†Ô∏è Payment Update Needed - Action Required by ' + formattedDate.split(',')[0],\n    html\n  });\n}\n\nexport async function sendWeeklyMealPlanEmail(\n  userEmail: string,\n  userName: string,\n  weekStartDate: Date,\n  mealPreviews?: Array<{name: string; category: string; calories: number; prepTime: number}>,\n  totalCalories?: number,\n  totalPrepTime?: number\n): Promise<boolean> {\n  const formattedDate = weekStartDate.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  const weekEndDate = new Date(weekStartDate);\n  weekEndDate.setDate(weekEndDate.getDate() + 6);\n  const formattedEndDate = weekEndDate.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const mealPreviewsHTML = mealPreviews && mealPreviews.length > 0 ? `\n    <h3>üçΩÔ∏è Meal Previews This Week:</h3>\n    ${mealPreviews.slice(0, 3).map(meal => `\n      <div class=\"meal-preview\">\n        <strong>${meal.name}</strong> (${meal.category})<br>\n        <span style=\"color: #666; font-size: 14px;\">\n          ${meal.calories} calories ‚Ä¢ ${meal.prepTime} min prep time\n        </span>\n      </div>\n    `).join('')}\n    ${mealPreviews.length > 3 ? `<p style=\"text-align: center; color: #666;\">...and ${mealPreviews.length - 3} more delicious meals!</p>` : ''}\n  ` : '';\n\n  const statsHTML = totalCalories && totalPrepTime ? `\n    <div class=\"stats-box\">\n      <div class=\"stat-item\">\n        <span class=\"stat-number\">${totalCalories.toLocaleString()}</span>\n        <span class=\"stat-label\">Total Calories This Week</span>\n      </div>\n      <div class=\"stat-item\">\n        <span class=\"stat-number\">${Math.round(totalPrepTime / 60)}</span>\n        <span class=\"stat-label\">Hours of Cooking</span>\n      </div>\n      <div class=\"stat-item\">\n        <span class=\"stat-number\">${mealPreviews?.length || 21}</span>\n        <span class=\"stat-label\">Meals Planned</span>\n      </div>\n    </div>\n  ` : '';\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Your Weekly Meal Plan is Ready!</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p style=\"font-size: 16px;\">Great news! Your personalized meal plan for <strong>${formattedDate} - ${formattedEndDate}</strong> has been created and is ready for you.</p>\n          \n          <div class=\"success\">\n            ‚úÖ <strong>Your weekly meal plan includes:</strong> Breakfast, lunch, and dinner for 7 days, all tailored to your preferences and dietary needs.\n          </div>\n          \n          ${statsHTML}\n          \n          <div class=\"highlight\">\n            <h3>This Week's Features:</h3>\n            <ul>\n              <li>üçΩÔ∏è <strong>Intelligently Selected Meals</strong> - our system picked recipes matching your taste preferences and dietary restrictions</li>\n              <li>üõí <strong>Complete Grocery List</strong> organized by category for easy shopping</li>\n              <li>üìä <strong>Nutritional Breakdown</strong> for each meal to track your goals</li>\n              <li>‚è±Ô∏è <strong>Prep Times Listed</strong> so you can plan your cooking schedule</li>\n              <li>üë®‚Äçüç≥ <strong>Step-by-Step Instructions</strong> for every recipe</li>\n            </ul>\n          </div>\n          \n          ${mealPreviewsHTML}\n          \n          <center>\n            <a href=\"${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/dashboard\" class=\"button\">View Full Meal Plan ‚Üí</a>\n          </center>\n          \n          <div class=\"info\">\n            <h3>üí° Pro Tips for Success:</h3>\n            <ul>\n              <li>Download your grocery list before shopping</li>\n              <li>Prep ingredients on Sunday for easier weekday cooking</li>\n              <li><strong>Rate your meals on Saturday</strong> - meals rated 3+ stars stay in rotation, 2 stars or below are removed</li>\n              <li>Check prep times to plan your cooking schedule</li>\n            </ul>\n          </div>\n          \n          <p style=\"margin-top: 30px;\"><strong>Important:</strong> On Saturday, we'll send you a review request. Rate your meals honestly - this helps us learn your preferences and pick even better meals for you next week!</p>\n          \n          <p style=\"margin-top: 20px;\">Let's make this week amazing! üí™<br><strong>The Full Gorilla Team</strong></p>\n          \n          <div class=\"support-box\">\n            <p style=\"margin: 0;\"><strong>Questions about a recipe?</strong> Reply to this email - we're here to help!</p>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: `üçΩÔ∏è Your Meal Plan is Ready for ${formattedDate}!`,\n    html\n  });\n}\n\nexport async function sendSubscriptionUpgradeEmail(\n  userEmail: string,\n  userName: string,\n  amount: number = 20\n): Promise<boolean> {\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Welcome to Full Gorilla Pro!</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p style=\"font-size: 18px;\"><strong>Congratulations! You've upgraded to Pro! üéâ</strong></p>\n          \n          <div class=\"success\">\n            <strong>Your Pro subscription is now active!</strong><br>\n            You've unlocked unlimited access to all 2,250 recipes across 25 cookbooks.\n          </div>\n          \n          <div class=\"highlight\">\n            <h3>What's New With Your Pro Account:</h3>\n            <ul>\n              <li>üåü <strong>2,250 Premium Recipes</strong> - up from 48!</li>\n              <li>üìö <strong>All 25 Themed Cookbooks</strong> (Mediterranean, Asian Fusion, Keto, Vegan, and more)</li>\n              <li>‚ôæÔ∏è <strong>Unlimited Weekly Meal Plans</strong> - no more one week per month limit</li>\n              <li>üìß <strong>Weekly Meal Plans</strong> delivered every Sunday morning</li>\n              <li>üéØ <strong>Intelligent Meal Selection</strong> from 2,250 recipes based on your profile</li>\n              <li>üìß <strong>Priority Support</strong> - get help faster</li>\n              <li>üì± <strong>Early Access</strong> to new features</li>\n            </ul>\n          </div>\n          \n          <center>\n            <a href=\"${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/cookbooks\" class=\"button\">Explore All Cookbooks ‚Üí</a>\n          </center>\n          \n          <div class=\"info\">\n            <h3>üìã Your Subscription Details:</h3>\n            <ul>\n              <li><strong>Plan:</strong> Full Gorilla Pro</li>\n              <li><strong>Billing:</strong> $${amount}/month</li>\n              <li><strong>Next Billing Date:</strong> ${new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</li>\n              <li><strong>Cancel Anytime:</strong> No commitments, manage from your dashboard</li>\n            </ul>\n          </div>\n          \n          <h3>üöÄ How It Works:</h3>\n          <p>Every Sunday morning, we'll intelligently select and deliver your personalized meal plan from all 25 cookbooks. On Saturday, we'll ask you to rate your meals - this helps us learn what you love!</p>\n          \n          <p style=\"margin-top: 30px;\">Thank you for supporting Full Gorilla! We're committed to helping you achieve your health goals with delicious, personalized meal planning.</p>\n          \n          <p style=\"margin-top: 20px;\">Here's to your health journey! üí™<br><strong>The Full Gorilla Team</strong></p>\n          \n          <div class=\"support-box\">\n            <p style=\"margin: 0;\"><strong>Questions?</strong> Reply to this email or visit your dashboard settings.</p>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: 'üéâ Welcome to Full Gorilla Pro - All 2,250 Recipes Unlocked!',\n    html\n  });\n}\n\nexport async function sendSubscriptionDowngradeEmail(\n  userEmail: string,\n  userName: string,\n  reason: string = 'payment failure after grace period'\n): Promise<boolean> {\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Full Gorilla Meal Planner</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p>Your Full Gorilla account has been switched to the <strong>Free Plan</strong> due to ${reason}.</p>\n          \n          <div class=\"warning\">\n            <strong>Your account is still active!</strong> You now have access to the Free plan with one full week of meal planning per month.\n          </div>\n          \n          <h3>What Changed:</h3>\n          <div class=\"steps\">\n            <div class=\"step\">\n              <strong>Before (Pro):</strong> Unlimited weekly meal plans from 2,250 recipes across 25 cookbooks\n            </div>\n            <div class=\"step\">\n              <strong>Now (Free):</strong> One full week (Sunday-Saturday) of meal planning per month from 48 recipes across 4 cookbooks\n            </div>\n          </div>\n          \n          <div class=\"info\">\n            <h3>You Still Get:</h3>\n            <ul>\n              <li>‚úÖ One full week of personalized meal planning each month</li>\n              <li>‚úÖ 48 delicious recipes from 4 popular cookbooks</li>\n              <li>‚úÖ Intelligent meal selection based on your profile</li>\n              <li>‚úÖ Auto-generated grocery lists</li>\n              <li>‚úÖ Nutritional information for every meal</li>\n              <li>‚úÖ Your saved preferences and dietary restrictions</li>\n            </ul>\n          </div>\n          \n          <h3>Want Your Pro Benefits Back?</h3>\n          <p>Upgrade anytime to regain unlimited access to all 2,250 recipes and features. Just $20/month.</p>\n          \n          <center>\n            <a href=\"${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/dashboard?tab=billing\" class=\"button\">Upgrade to Pro ‚Üí</a>\n          </center>\n          \n          <p style=\"margin-top: 30px;\">We understand things happen! If you have questions about your account or need help upgrading, just reply to this email.</p>\n          \n          <p style=\"margin-top: 20px;\">Keep moving forward! üí™<br><strong>The Full Gorilla Team</strong></p>\n          \n          <div class=\"support-box\">\n            <p style=\"margin: 0;\"><strong>Need Help?</strong> Email support@fullgorilla.com or reply to this message.</p>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: 'Your Full Gorilla Account - Now on Free Plan',\n    html\n  });\n}\n\nexport async function sendSubscriptionRenewalReminderEmail(\n  userEmail: string,\n  userName: string,\n  renewalDate: Date,\n  amount: number = 20,\n  lastFourDigits?: string\n): Promise<boolean> {\n  const formattedDate = renewalDate.toLocaleDateString('en-US', {\n    weekday: 'long',\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  const paymentMethodText = lastFourDigits ? `card ending in ${lastFourDigits}` : 'your payment method on file';\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Full Gorilla Meal Planner</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p>This is a friendly reminder that your Full Gorilla Pro subscription will automatically renew on <strong>${formattedDate}</strong>.</p>\n          \n          <div class=\"info\">\n            <h3>üìã Upcoming Charge Details:</h3>\n            <ul>\n              <li><strong>Amount:</strong> $${amount}</li>\n              <li><strong>Date:</strong> ${formattedDate}</li>\n              <li><strong>Payment Method:</strong> ${paymentMethodText}</li>\n              <li><strong>Subscription:</strong> Full Gorilla Pro (Unlimited access)</li>\n            </ul>\n          </div>\n          \n          <h3>No Action Needed!</h3>\n          <p>Your subscription will continue automatically and you'll keep enjoying:</p>\n          \n          <div class=\"highlight\">\n            <ul>\n              <li>üåü All 2,250 recipes across 25 cookbooks</li>\n              <li>‚ôæÔ∏è Unlimited meal planning</li>\n              <li>üõí Auto-generated grocery lists</li>\n              <li>üìä Detailed nutritional tracking</li>\n              <li>üîÑ Recipe swaps and advanced filters</li>\n              <li>üìß Priority customer support</li>\n            </ul>\n          </div>\n          \n          <h3>Need to Make Changes?</h3>\n          <p>If you need to update your payment method or manage your subscription, you can do so anytime from your dashboard:</p>\n          \n          <center>\n            <a href=\"${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/dashboard?tab=billing\" class=\"button\">Manage Subscription ‚Üí</a>\n          </center>\n          \n          <p style=\"margin-top: 30px;\">Thank you for being a valued Full Gorilla Pro member! We're honored to be part of your healthy eating journey.</p>\n          \n          <p style=\"margin-top: 20px;\">Keep crushing it! üí™<br><strong>The Full Gorilla Team</strong></p>\n          \n          <div class=\"support-box\">\n            <p style=\"margin: 0;\"><strong>Questions?</strong> Reply to this email - we're here to help!</p>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n          <p style=\"margin-top: 10px;\">This is an automated reminder for your upcoming subscription renewal.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: `Reminder: Your Full Gorilla Pro Subscription Renews ${formattedDate.split(',')[0]}`,\n    html\n  });\n}\n\nexport async function sendMealRatingReminderEmail(\n  userEmail: string,\n  userName: string,\n  unratedMealsCount: number\n): Promise<boolean> {\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Help Us Learn What You Love!</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p>We noticed you have <strong>${unratedMealsCount} meals</strong> from your recent meal plans that haven't been rated yet.</p>\n          \n          <div class=\"info\">\n            <strong>‚≠ê Why Rating Matters:</strong><br>\n            Your ratings help us understand your taste preferences better so we can recommend meals you'll absolutely love! It only takes 5 seconds per meal.\n          </div>\n          \n          <h3>How Your Ratings Help:</h3>\n          <div class=\"steps\">\n            <div class=\"step\">\n              <strong>‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5 stars):</strong> \"Loved it!\" - We'll prioritize similar recipes in your future meal plans\n            </div>\n            <div class=\"step\">\n              <strong>‚≠ê‚≠ê‚≠ê‚≠ê (4 stars):</strong> \"Really good\" - We'll include more recipes like this\n            </div>\n            <div class=\"step\">\n              <strong>‚≠ê‚≠ê‚≠ê (3 stars):</strong> \"It was okay\" - We'll show these less often\n            </div>\n            <div class=\"step\">\n              <strong>‚≠ê‚≠ê or ‚≠ê (1-2 stars):</strong> \"Not for me\" - We'll stop recommending similar meals\n            </div>\n          </div>\n          \n          <div class=\"highlight\">\n            <h3>üéØ Better Ratings = Better Meal Plans!</h3>\n            <p>The more you rate, the smarter our recommendations become. Users who rate regularly get meal plans they love 85% more often!</p>\n          </div>\n          \n          <center>\n            <a href=\"${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/dashboard\" class=\"button\">Rate My Meals ‚Üí</a>\n          </center>\n          \n          <p style=\"margin-top: 30px;\">Take 2 minutes to rate your recent meals and help us create your perfect meal plans! üåü</p>\n          \n          <p style=\"margin-top: 20px;\">Thanks for helping us serve you better! üí™<br><strong>The Full Gorilla Team</strong></p>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: `‚≠ê Rate Your Recent Meals - Help Us Improve Your Plan!`,\n    html\n  });\n}\n\nexport async function sendPasswordResetEmail(\n  userEmail: string,\n  userName: string,\n  resetToken: string,\n  expiresInHours: number = 24\n): Promise<boolean> {\n  const resetUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:5000'}/reset-password?token=${resetToken}`;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head><style>${emailStyles}</style></head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>ü¶ç Password Reset Request</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hi ${userName},</h2>\n          <p>We received a request to reset your Full Gorilla Meal Planner password.</p>\n          \n          <div class=\"warning\">\n            <strong>‚è∞ This link expires in ${expiresInHours} hours</strong><br>\n            For security, password reset links are only valid for ${expiresInHours} hours.\n          </div>\n          \n          <p>Click the button below to create a new password:</p>\n          \n          <center>\n            <a href=\"${resetUrl}\" class=\"button\">Reset My Password ‚Üí</a>\n          </center>\n          \n          <div class=\"info\">\n            <h3>üîí Security Tips:</h3>\n            <ul>\n              <li>Use a strong, unique password</li>\n              <li>Combine uppercase, lowercase, numbers, and symbols</li>\n              <li>Avoid using the same password across multiple sites</li>\n              <li>Never share your password with anyone</li>\n            </ul>\n          </div>\n          \n          <div class=\"warning\">\n            <strong>‚ö†Ô∏è Didn't Request This?</strong><br>\n            If you didn't request a password reset, please ignore this email. Your password will remain unchanged and this link will expire automatically.\n          </div>\n          \n          <p style=\"margin-top: 30px;\">For security reasons, we can't show your current password. But don't worry - creating a new one is quick and easy!</p>\n          \n          <p style=\"margin-top: 20px;\">Stay secure! üîê<br><strong>The Full Gorilla Team</strong></p>\n          \n          <div class=\"support-box\">\n            <p style=\"margin: 0;\"><strong>Having Trouble?</strong> Reply to this email and we'll help you get back into your account.</p>\n          </div>\n        </div>\n        <div class=\"footer\">\n          <p>Full Gorilla Meal Planner | Healthy eating made simple</p>\n          <p style=\"margin-top: 10px;\">This password reset link expires on ${new Date(Date.now() + expiresInHours * 60 * 60 * 1000).toLocaleString('en-US')}</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    subject: 'üîí Reset Your Full Gorilla Password',\n    html\n  });\n}\n","size_bytes":32272},"utils/mealPlanner.ts":{"content":"interface Meal {\n  id: number;\n  name: string;\n  category: string;\n  cookbookId: number;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fats: number;\n  prepTime: number;\n  ingredients: string[];\n  dietary: string[];\n}\n\ninterface UserPreferences {\n  healthGoal?: string;\n  dietaryRestrictions?: string[];\n  cookingTime?: string;\n  cuisinePreferences?: string[];\n  spiceLevel?: string;\n  calorieTarget?: number;\n}\n\nexport function generateWeeklyMealPlan(\n  meals: Meal[], \n  preferences: UserPreferences,\n  accountType: 'free' | 'paid' = 'free'\n): any {\n  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  const mealPlan = [];\n\n  for (const day of daysOfWeek) {\n    const breakfast = meals.find(m => m.category === 'breakfast') || meals[0];\n    const lunch = meals.find(m => m.category === 'lunch') || meals[1];\n    const dinner = meals.find(m => m.category === 'dinner') || meals[2];\n\n    mealPlan.push({\n      day,\n      breakfast: { id: breakfast.id, name: breakfast.name, calories: breakfast.calories },\n      lunch: { id: lunch.id, name: lunch.name, calories: lunch.calories },\n      dinner: { id: dinner.id, name: dinner.name, calories: dinner.calories }\n    });\n  }\n\n  return {\n    weekOf: new Date().toISOString().split('T')[0],\n    meals: accountType === 'free' ? mealPlan.slice(0, 7) : mealPlan\n  };\n}\n\nexport function filterMealsByDietary(meals: Meal[], restrictions: string[]): Meal[] {\n  if (!restrictions || restrictions.length === 0 || restrictions.includes('None')) {\n    return meals;\n  }\n\n  return meals.filter(meal => {\n    return restrictions.every(restriction => \n      meal.dietary.includes(restriction.toLowerCase())\n    );\n  });\n}\n\nexport function calculateNutrition(meals: Meal[]): {\n  totalCalories: number;\n  totalProtein: number;\n  totalCarbs: number;\n  totalFats: number;\n} {\n  return meals.reduce((acc, meal) => ({\n    totalCalories: acc.totalCalories + meal.calories,\n    totalProtein: acc.totalProtein + meal.protein,\n    totalCarbs: acc.totalCarbs + meal.carbs,\n    totalFats: acc.totalFats + meal.fats\n  }), { totalCalories: 0, totalProtein: 0, totalCarbs: 0, totalFats: 0 });\n}\n\nexport function generateGroceryList(weeklyMeals: Meal[]): { [category: string]: string[] } {\n  const groceryList: { [category: string]: Set<string> } = {\n    'Produce': new Set(),\n    'Meat & Seafood': new Set(),\n    'Dairy': new Set(),\n    'Pantry': new Set()\n  };\n\n  const produceItems = ['avocado', 'lettuce', 'broccoli', 'carrots', 'lemon', 'tomato', 'onion'];\n  const meatItems = ['chicken', 'salmon', 'beef', 'turkey', 'pork'];\n  const dairyItems = ['egg', 'milk', 'cheese', 'butter', 'yogurt', 'parmesan'];\n\n  weeklyMeals.forEach(meal => {\n    meal.ingredients.forEach(ingredient => {\n      const lowerIngredient = ingredient.toLowerCase();\n      \n      if (produceItems.some(item => lowerIngredient.includes(item))) {\n        groceryList['Produce'].add(ingredient);\n      } else if (meatItems.some(item => lowerIngredient.includes(item))) {\n        groceryList['Meat & Seafood'].add(ingredient);\n      } else if (dairyItems.some(item => lowerIngredient.includes(item))) {\n        groceryList['Dairy'].add(ingredient);\n      } else {\n        groceryList['Pantry'].add(ingredient);\n      }\n    });\n  });\n\n  return Object.fromEntries(\n    Object.entries(groceryList).map(([category, items]) => [category, Array.from(items)])\n  );\n}\n","size_bytes":3411},"utils/subscription.ts":{"content":"export type Plan = 'free' | 'pro';\n\nexport interface SubscriptionFeatures {\n  weeksPerMonth: number;\n  cookbookAccess: 'limited' | 'unlimited';\n  totalMealsAvailable: number;\n  canAccessPremiumCookbooks: boolean;\n  cookbooksUnlocked: number;\n}\n\nexport function getSubscriptionFeatures(plan: Plan): SubscriptionFeatures {\n  if (plan === 'pro') {\n    return {\n      weeksPerMonth: Infinity,\n      cookbookAccess: 'unlimited',\n      totalMealsAvailable: 2250,\n      canAccessPremiumCookbooks: true,\n      cookbooksUnlocked: 25\n    };\n  }\n\n  return {\n    weeksPerMonth: 1,\n    cookbookAccess: 'limited',\n    totalMealsAvailable: 48,\n    canAccessPremiumCookbooks: false,\n    cookbooksUnlocked: 4\n  };\n}\n\nexport function canAccessCookbook(userPlan: Plan, cookbookIsPremium: boolean): boolean {\n  if (userPlan === 'pro') {\n    return true;\n  }\n\n  return !cookbookIsPremium;\n}\n\nexport function getRemainingWeeks(userPlan: Plan, weeksUsedThisMonth: number): number {\n  const features = getSubscriptionFeatures(userPlan);\n  \n  if (features.weeksPerMonth === Infinity) {\n    return Infinity;\n  }\n\n  return Math.max(0, features.weeksPerMonth - weeksUsedThisMonth);\n}\n\nexport function shouldShowUpgradePrompt(userPlan: Plan): boolean {\n  return userPlan === 'free';\n}\n\nexport function getUpgradeMessage(userPlan: Plan): string {\n  if (userPlan === 'pro') {\n    return '';\n  }\n\n  return 'Upgrade to Pro for unlimited weekly meal plans and access to all 2,250 recipes across 25 cookbooks!';\n}\n","size_bytes":1479}},"version":1}